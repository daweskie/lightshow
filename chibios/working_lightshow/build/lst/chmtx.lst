   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"chmtx.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prio_insert,"ax",%progbits
  20              		.align	2
  21              		.p2align 4,,15
  22              		.thumb
  23              		.thumb_func
  25              	prio_insert:
  26              	.LFB0:
  27              		.file 1 "/usr/src/chibiostest/os/kernel/include/chinline.h"
   1:/usr/src/chibiostest/os/kernel/include/chinline.h **** /*
   2:/usr/src/chibiostest/os/kernel/include/chinline.h ****     ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:/usr/src/chibiostest/os/kernel/include/chinline.h ****                  2011,2012 Giovanni Di Sirio.
   4:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
   5:/usr/src/chibiostest/os/kernel/include/chinline.h ****     This file is part of ChibiOS/RT.
   6:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
   7:/usr/src/chibiostest/os/kernel/include/chinline.h ****     ChibiOS/RT is free software; you can redistribute it and/or modify
   8:/usr/src/chibiostest/os/kernel/include/chinline.h ****     it under the terms of the GNU General Public License as published by
   9:/usr/src/chibiostest/os/kernel/include/chinline.h ****     the Free Software Foundation; either version 3 of the License, or
  10:/usr/src/chibiostest/os/kernel/include/chinline.h ****     (at your option) any later version.
  11:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  12:/usr/src/chibiostest/os/kernel/include/chinline.h ****     ChibiOS/RT is distributed in the hope that it will be useful,
  13:/usr/src/chibiostest/os/kernel/include/chinline.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/src/chibiostest/os/kernel/include/chinline.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/src/chibiostest/os/kernel/include/chinline.h ****     GNU General Public License for more details.
  16:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  17:/usr/src/chibiostest/os/kernel/include/chinline.h ****     You should have received a copy of the GNU General Public License
  18:/usr/src/chibiostest/os/kernel/include/chinline.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19:/usr/src/chibiostest/os/kernel/include/chinline.h **** */
  20:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  21:/usr/src/chibiostest/os/kernel/include/chinline.h **** /**
  22:/usr/src/chibiostest/os/kernel/include/chinline.h ****  * @file    chinline.h
  23:/usr/src/chibiostest/os/kernel/include/chinline.h ****  * @brief   Kernel inlined functions.
  24:/usr/src/chibiostest/os/kernel/include/chinline.h ****  * @details In this file there are a set of inlined functions if the
  25:/usr/src/chibiostest/os/kernel/include/chinline.h ****  *          @p CH_OPTIMIZE_SPEED is enabled.
  26:/usr/src/chibiostest/os/kernel/include/chinline.h ****  */
  27:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  28:/usr/src/chibiostest/os/kernel/include/chinline.h **** #ifndef _CHINLINE_H_
  29:/usr/src/chibiostest/os/kernel/include/chinline.h **** #define _CHINLINE_H_
  30:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  31:/usr/src/chibiostest/os/kernel/include/chinline.h **** /* If the performance code path has been chosen then all the following
  32:/usr/src/chibiostest/os/kernel/include/chinline.h ****    functions are inlined into the various kernel modules.*/
  33:/usr/src/chibiostest/os/kernel/include/chinline.h **** #if CH_OPTIMIZE_SPEED
  34:/usr/src/chibiostest/os/kernel/include/chinline.h **** static INLINE void prio_insert(Thread *tp, ThreadsQueue *tqp) {
  28              		.loc 1 34 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 84B0     		sub	sp, sp, #16
  34              		.cfi_def_cfa_offset 16
  35 0002 0190     		str	r0, [sp, #4]
  36 0004 0091     		str	r1, [sp]
  35:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  36:/usr/src/chibiostest/os/kernel/include/chinline.h ****   Thread *cp = (Thread *)tqp;
  37              		.loc 1 36 0
  38 0006 009B     		ldr	r3, [sp]
  39 0008 0393     		str	r3, [sp, #12]
  40              	.L3:
  37:/usr/src/chibiostest/os/kernel/include/chinline.h ****   do {
  38:/usr/src/chibiostest/os/kernel/include/chinline.h ****     cp = cp->p_next;
  41              		.loc 1 38 0 discriminator 1
  42 000a 039B     		ldr	r3, [sp, #12]
  43 000c 1B68     		ldr	r3, [r3]
  44 000e 0393     		str	r3, [sp, #12]
  39:/usr/src/chibiostest/os/kernel/include/chinline.h ****   } while ((cp != (Thread *)tqp) && (cp->p_prio >= tp->p_prio));
  45              		.loc 1 39 0 discriminator 1
  46 0010 039A     		ldr	r2, [sp, #12]
  47 0012 009B     		ldr	r3, [sp]
  48 0014 9A42     		cmp	r2, r3
  49 0016 05D0     		beq	.L2
  50 0018 039B     		ldr	r3, [sp, #12]
  51 001a 9A68     		ldr	r2, [r3, #8]
  52 001c 019B     		ldr	r3, [sp, #4]
  53 001e 9B68     		ldr	r3, [r3, #8]
  54 0020 9A42     		cmp	r2, r3
  55 0022 F2D2     		bcs	.L3
  56              	.L2:
  40:/usr/src/chibiostest/os/kernel/include/chinline.h ****   tp->p_next = cp;
  57              		.loc 1 40 0
  58 0024 019B     		ldr	r3, [sp, #4]
  59 0026 039A     		ldr	r2, [sp, #12]
  60 0028 1A60     		str	r2, [r3]
  41:/usr/src/chibiostest/os/kernel/include/chinline.h ****   tp->p_prev = cp->p_prev;
  61              		.loc 1 41 0
  62 002a 039B     		ldr	r3, [sp, #12]
  63 002c 5A68     		ldr	r2, [r3, #4]
  64 002e 019B     		ldr	r3, [sp, #4]
  65 0030 5A60     		str	r2, [r3, #4]
  42:/usr/src/chibiostest/os/kernel/include/chinline.h ****   tp->p_prev->p_next = cp->p_prev = tp;
  66              		.loc 1 42 0
  67 0032 019B     		ldr	r3, [sp, #4]
  68 0034 5B68     		ldr	r3, [r3, #4]
  69 0036 039A     		ldr	r2, [sp, #12]
  70 0038 0199     		ldr	r1, [sp, #4]
  71 003a 5160     		str	r1, [r2, #4]
  72 003c 039A     		ldr	r2, [sp, #12]
  73 003e 5268     		ldr	r2, [r2, #4]
  74 0040 1A60     		str	r2, [r3]
  43:/usr/src/chibiostest/os/kernel/include/chinline.h **** }
  75              		.loc 1 43 0
  76 0042 04B0     		add	sp, sp, #16
  77              		@ sp needed
  78 0044 7047     		bx	lr
  79              		.cfi_endproc
  80              	.LFE0:
  82 0046 00BFAFF3 		.section	.text.fifo_remove,"ax",%progbits
  82      0080AFF3 
  82      0080
  83              		.align	2
  84              		.p2align 4,,15
  85              		.thumb
  86              		.thumb_func
  88              	fifo_remove:
  89              	.LFB2:
  44:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  45:/usr/src/chibiostest/os/kernel/include/chinline.h **** static INLINE void queue_insert(Thread *tp, ThreadsQueue *tqp) {
  46:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  47:/usr/src/chibiostest/os/kernel/include/chinline.h ****   tp->p_next = (Thread *)tqp;
  48:/usr/src/chibiostest/os/kernel/include/chinline.h ****   tp->p_prev = tqp->p_prev;
  49:/usr/src/chibiostest/os/kernel/include/chinline.h ****   tp->p_prev->p_next = tqp->p_prev = tp;
  50:/usr/src/chibiostest/os/kernel/include/chinline.h **** }
  51:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  52:/usr/src/chibiostest/os/kernel/include/chinline.h **** static INLINE Thread *fifo_remove(ThreadsQueue *tqp) {
  90              		.loc 1 52 0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 16
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
  95 0000 84B0     		sub	sp, sp, #16
  96              		.cfi_def_cfa_offset 16
  97 0002 0190     		str	r0, [sp, #4]
  53:/usr/src/chibiostest/os/kernel/include/chinline.h ****   Thread *tp = tqp->p_next;
  98              		.loc 1 53 0
  99 0004 019B     		ldr	r3, [sp, #4]
 100 0006 1B68     		ldr	r3, [r3]
 101 0008 0393     		str	r3, [sp, #12]
  54:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  55:/usr/src/chibiostest/os/kernel/include/chinline.h ****   (tqp->p_next = tp->p_next)->p_prev = (Thread *)tqp;
 102              		.loc 1 55 0
 103 000a 039B     		ldr	r3, [sp, #12]
 104 000c 1A68     		ldr	r2, [r3]
 105 000e 019B     		ldr	r3, [sp, #4]
 106 0010 1A60     		str	r2, [r3]
 107 0012 019B     		ldr	r3, [sp, #4]
 108 0014 1B68     		ldr	r3, [r3]
 109 0016 019A     		ldr	r2, [sp, #4]
 110 0018 5A60     		str	r2, [r3, #4]
  56:/usr/src/chibiostest/os/kernel/include/chinline.h ****   return tp;
 111              		.loc 1 56 0
 112 001a 039B     		ldr	r3, [sp, #12]
  57:/usr/src/chibiostest/os/kernel/include/chinline.h **** }
 113              		.loc 1 57 0
 114 001c 1846     		mov	r0, r3
 115 001e 04B0     		add	sp, sp, #16
 116              		@ sp needed
 117 0020 7047     		bx	lr
 118              		.cfi_endproc
 119              	.LFE2:
 121 0022 00BFAFF3 		.section	.text.dequeue,"ax",%progbits
 121      0080AFF3 
 121      0080AFF3 
 121      0080
 122              		.align	2
 123              		.p2align 4,,15
 124              		.thumb
 125              		.thumb_func
 127              	dequeue:
 128              	.LFB4:
  58:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  59:/usr/src/chibiostest/os/kernel/include/chinline.h **** static INLINE Thread *lifo_remove(ThreadsQueue *tqp) {
  60:/usr/src/chibiostest/os/kernel/include/chinline.h ****   Thread *tp = tqp->p_prev;
  61:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  62:/usr/src/chibiostest/os/kernel/include/chinline.h ****   (tqp->p_prev = tp->p_prev)->p_next = (Thread *)tqp;
  63:/usr/src/chibiostest/os/kernel/include/chinline.h ****   return tp;
  64:/usr/src/chibiostest/os/kernel/include/chinline.h **** }
  65:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  66:/usr/src/chibiostest/os/kernel/include/chinline.h **** static INLINE Thread *dequeue(Thread *tp) {
 129              		.loc 1 66 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 8
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134 0000 82B0     		sub	sp, sp, #8
 135              		.cfi_def_cfa_offset 8
 136 0002 0190     		str	r0, [sp, #4]
  67:/usr/src/chibiostest/os/kernel/include/chinline.h **** 
  68:/usr/src/chibiostest/os/kernel/include/chinline.h ****   tp->p_prev->p_next = tp->p_next;
 137              		.loc 1 68 0
 138 0004 019B     		ldr	r3, [sp, #4]
 139 0006 5B68     		ldr	r3, [r3, #4]
 140 0008 019A     		ldr	r2, [sp, #4]
 141 000a 1268     		ldr	r2, [r2]
 142 000c 1A60     		str	r2, [r3]
  69:/usr/src/chibiostest/os/kernel/include/chinline.h ****   tp->p_next->p_prev = tp->p_prev;
 143              		.loc 1 69 0
 144 000e 019B     		ldr	r3, [sp, #4]
 145 0010 1B68     		ldr	r3, [r3]
 146 0012 019A     		ldr	r2, [sp, #4]
 147 0014 5268     		ldr	r2, [r2, #4]
 148 0016 5A60     		str	r2, [r3, #4]
  70:/usr/src/chibiostest/os/kernel/include/chinline.h ****   return tp;
 149              		.loc 1 70 0
 150 0018 019B     		ldr	r3, [sp, #4]
  71:/usr/src/chibiostest/os/kernel/include/chinline.h **** }
 151              		.loc 1 71 0
 152 001a 1846     		mov	r0, r3
 153 001c 02B0     		add	sp, sp, #8
 154              		@ sp needed
 155 001e 7047     		bx	lr
 156              		.cfi_endproc
 157              	.LFE4:
 159              		.section	.rodata
 160              		.align	2
 161              	.LC0:
 162 0000 2263684D 		.ascii	"\"chMtxInit\"()\000"
 162      7478496E 
 162      69742228 
 162      2900
 163              		.section	.text.chMtxInit,"ax",%progbits
 164              		.align	2
 165              		.p2align 4,,15
 166              		.global	chMtxInit
 167              		.thumb
 168              		.thumb_func
 170              	chMtxInit:
 171              	.LFB7:
 172              		.file 2 "/usr/src/chibiostest/os/kernel/src/chmtx.c"
   1:/usr/src/chibiostest/os/kernel/src/chmtx.c **** /*
   2:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:/usr/src/chibiostest/os/kernel/src/chmtx.c ****                  2011,2012 Giovanni Di Sirio.
   4:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
   5:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     This file is part of ChibiOS/RT.
   6:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
   7:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ChibiOS/RT is free software; you can redistribute it and/or modify
   8:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     it under the terms of the GNU General Public License as published by
   9:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     the Free Software Foundation; either version 3 of the License, or
  10:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     (at your option) any later version.
  11:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
  12:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ChibiOS/RT is distributed in the hope that it will be useful,
  13:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     GNU General Public License for more details.
  16:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
  17:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     You should have received a copy of the GNU General Public License
  18:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19:/usr/src/chibiostest/os/kernel/src/chmtx.c **** */
  20:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
  21:/usr/src/chibiostest/os/kernel/src/chmtx.c **** /**
  22:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @file    chmtx.c
  23:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @brief   Mutexes code.
  24:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
  25:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @addtogroup mutexes
  26:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @details Mutexes related APIs and services.
  27:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
  28:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          <h2>Operation mode</h2>
  29:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          A mutex is a threads synchronization object that can be in two
  30:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          distinct states:
  31:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          - Not owned (unlocked).
  32:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          - Owned by a thread (locked).
  33:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          .
  34:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          Operations defined for mutexes:
  35:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          - <b>Lock</b>: The mutex is checked, if the mutex is not owned by
  36:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *            some other thread then it is associated to the locking thread
  37:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *            else the thread is queued on the mutex in a list ordered by
  38:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *            priority.
  39:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          - <b>Unlock</b>: The mutex is released by the owner and the highest
  40:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *            priority thread waiting in the queue, if any, is resumed and made
  41:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *            owner of the mutex.
  42:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          .
  43:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          <h2>Constraints</h2>
  44:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          In ChibiOS/RT the Unlock operations are always performed in
  45:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          lock-reverse order. The unlock API does not even have a parameter,
  46:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          the mutex to unlock is selected from an internal, per-thread, stack
  47:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          of owned mutexes. This both improves the performance and is
  48:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          required for an efficient implementation of the priority
  49:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          inheritance mechanism.
  50:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
  51:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          <h2>The priority inversion problem</h2>
  52:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          The mutexes in ChibiOS/RT implements the <b>full</b> priority
  53:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          inheritance mechanism in order handle the priority inversion
  54:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          problem.<br>
  55:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          When a thread is queued on a mutex, any thread, directly or
  56:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          indirectly, holding the mutex gains the same priority of the
  57:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          waiting thread (if their priority was not already equal or higher).
  58:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          The mechanism works with any number of nested mutexes and any
  59:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          number of involved threads. The algorithm complexity (worst case)
  60:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          is N with N equal to the number of nested mutexes.
  61:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @pre     In order to use the mutex APIs the @p CH_USE_MUTEXES option
  62:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          must be enabled in @p chconf.h.
  63:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @post    Enabling mutexes requires 5-12 (depending on the architecture)
  64:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          extra bytes in the @p Thread structure.
  65:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @{
  66:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  */
  67:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
  68:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #include "ch.h"
  69:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
  70:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #if CH_USE_MUTEXES || defined(__DOXYGEN__)
  71:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
  72:/usr/src/chibiostest/os/kernel/src/chmtx.c **** /**
  73:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @brief   Initializes s @p Mutex structure.
  74:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
  75:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @param[out] mp       pointer to a @p Mutex structure
  76:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
  77:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @init
  78:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  */
  79:/usr/src/chibiostest/os/kernel/src/chmtx.c **** void chMtxInit(Mutex *mp) {
 173              		.loc 2 79 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 8
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177 0000 00B5     		push	{lr}
 178              		.cfi_def_cfa_offset 4
 179              		.cfi_offset 14, -4
 180 0002 83B0     		sub	sp, sp, #12
 181              		.cfi_def_cfa_offset 16
 182 0004 0190     		str	r0, [sp, #4]
  80:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
  81:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chDbgCheck(mp != NULL, "chMtxInit");
 183              		.loc 2 81 0
 184 0006 019B     		ldr	r3, [sp, #4]
 185 0008 002B     		cmp	r3, #0
 186 000a 02D1     		bne	.L9
 187              		.loc 2 81 0 is_stmt 0 discriminator 1
 188 000c 0748     		ldr	r0, .L10
 189 000e FFF7FEFF 		bl	chDbgPanic
 190              	.L9:
  82:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
  83:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   queue_init(&mp->m_queue);
 191              		.loc 2 83 0 is_stmt 1
 192 0012 019A     		ldr	r2, [sp, #4]
 193 0014 019B     		ldr	r3, [sp, #4]
 194 0016 5A60     		str	r2, [r3, #4]
 195 0018 019B     		ldr	r3, [sp, #4]
 196 001a 5A68     		ldr	r2, [r3, #4]
 197 001c 019B     		ldr	r3, [sp, #4]
 198 001e 1A60     		str	r2, [r3]
  84:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   mp->m_owner = NULL;
 199              		.loc 2 84 0
 200 0020 019B     		ldr	r3, [sp, #4]
 201 0022 0022     		movs	r2, #0
 202 0024 9A60     		str	r2, [r3, #8]
  85:/usr/src/chibiostest/os/kernel/src/chmtx.c **** }
 203              		.loc 2 85 0
 204 0026 03B0     		add	sp, sp, #12
 205              		@ sp needed
 206 0028 5DF804FB 		ldr	pc, [sp], #4
 207              	.L11:
 208              		.align	2
 209              	.L10:
 210 002c 00000000 		.word	.LC0
 211              		.cfi_endproc
 212              	.LFE7:
 214              		.section	.text.chMtxLock,"ax",%progbits
 215              		.align	2
 216              		.p2align 4,,15
 217              		.global	chMtxLock
 218              		.thumb
 219              		.thumb_func
 221              	chMtxLock:
 222              	.LFB8:
  86:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
  87:/usr/src/chibiostest/os/kernel/src/chmtx.c **** /**
  88:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @brief   Locks the specified mutex.
  89:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
  90:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          mutexes.
  91:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
  92:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @param[in] mp        pointer to the @p Mutex structure
  93:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
  94:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @api
  95:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  */
  96:/usr/src/chibiostest/os/kernel/src/chmtx.c **** void chMtxLock(Mutex *mp) {
 223              		.loc 2 96 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 8
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227 0000 00B5     		push	{lr}
 228              		.cfi_def_cfa_offset 4
 229              		.cfi_offset 14, -4
 230 0002 83B0     		sub	sp, sp, #12
 231              		.cfi_def_cfa_offset 16
 232 0004 0190     		str	r0, [sp, #4]
 233              	.LBB2:
  97:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
  98:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chSysLock();
 234              		.loc 2 98 0
 235 0006 2023     		movs	r3, #32
 236              	@ 98 "/usr/src/chibiostest/os/kernel/src/chmtx.c" 1
 237 0008 83F31188 		msr     BASEPRI, r3
 238              	@ 0 "" 2
 239              		.thumb
 240              	.LBE2:
 241 000c FFF7FEFF 		bl	dbg_check_lock
  99:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 100:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chMtxLockS(mp);
 242              		.loc 2 100 0
 243 0010 0198     		ldr	r0, [sp, #4]
 244 0012 FFF7FEFF 		bl	chMtxLockS
 101:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 102:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chSysUnlock();
 245              		.loc 2 102 0
 246 0016 FFF7FEFF 		bl	dbg_check_unlock
 247              	.LBB3:
 248 001a 0023     		movs	r3, #0
 249              	@ 102 "/usr/src/chibiostest/os/kernel/src/chmtx.c" 1
 250 001c 83F31188 		msr     BASEPRI, r3
 251              	@ 0 "" 2
 252              		.thumb
 253              	.LBE3:
 103:/usr/src/chibiostest/os/kernel/src/chmtx.c **** }
 254              		.loc 2 103 0
 255 0020 03B0     		add	sp, sp, #12
 256              		@ sp needed
 257 0022 5DF804FB 		ldr	pc, [sp], #4
 258              		.cfi_endproc
 259              	.LFE8:
 261 0026 00BFAFF3 		.section	.rodata
 261      0080AFF3 
 261      0080
 262 000e 0000     		.align	2
 263              	.LC1:
 264 0010 2263684D 		.ascii	"\"chMtxLockS\"()\000"
 264      74784C6F 
 264      636B5322 
 264      282900
 265 001f 00       		.align	2
 266              	.LC2:
 267 0020 63684D74 		.ascii	"chMtxLockS(), #1\000"
 267      784C6F63 
 267      6B532829 
 267      2C202331 
 267      00
 268 0031 000000   		.align	2
 269              	.LC3:
 270 0034 63684D74 		.ascii	"chMtxLockS(), #2\000"
 270      784C6F63 
 270      6B532829 
 270      2C202332 
 270      00
 271              		.section	.text.chMtxLockS,"ax",%progbits
 272              		.align	2
 273              		.p2align 4,,15
 274              		.global	chMtxLockS
 275              		.thumb
 276              		.thumb_func
 278              	chMtxLockS:
 279              	.LFB9:
 104:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 105:/usr/src/chibiostest/os/kernel/src/chmtx.c **** /**
 106:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @brief   Locks the specified mutex.
 107:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 108:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          mutexes.
 109:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
 110:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @param[in] mp        pointer to the @p Mutex structure
 111:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
 112:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @sclass
 113:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  */
 114:/usr/src/chibiostest/os/kernel/src/chmtx.c **** void chMtxLockS(Mutex *mp) {
 280              		.loc 2 114 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 16
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284 0000 00B5     		push	{lr}
 285              		.cfi_def_cfa_offset 4
 286              		.cfi_offset 14, -4
 287 0002 85B0     		sub	sp, sp, #20
 288              		.cfi_def_cfa_offset 24
 289 0004 0190     		str	r0, [sp, #4]
 115:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   Thread *ctp = currp;
 290              		.loc 2 115 0
 291 0006 3C4B     		ldr	r3, .L26
 292 0008 9B69     		ldr	r3, [r3, #24]
 293 000a 0293     		str	r3, [sp, #8]
 116:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 117:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chDbgCheckClassS();
 294              		.loc 2 117 0
 295 000c FFF7FEFF 		bl	chDbgCheckClassS
 118:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chDbgCheck(mp != NULL, "chMtxLockS");
 296              		.loc 2 118 0
 297 0010 019B     		ldr	r3, [sp, #4]
 298 0012 002B     		cmp	r3, #0
 299 0014 02D1     		bne	.L14
 300              		.loc 2 118 0 is_stmt 0 discriminator 1
 301 0016 3948     		ldr	r0, .L26+4
 302 0018 FFF7FEFF 		bl	chDbgPanic
 303              	.L14:
 119:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 120:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   /* Is the mutex already locked? */
 121:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   if (mp->m_owner != NULL) {
 304              		.loc 2 121 0 is_stmt 1
 305 001c 019B     		ldr	r3, [sp, #4]
 306 001e 9B68     		ldr	r3, [r3, #8]
 307 0020 002B     		cmp	r3, #0
 308 0022 5BD0     		beq	.L15
 309              	.LBB4:
 122:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     /* Priority inheritance protocol; explores the thread-mutex dependencies
 123:/usr/src/chibiostest/os/kernel/src/chmtx.c ****        boosting the priority of all the affected threads to equal the priority
 124:/usr/src/chibiostest/os/kernel/src/chmtx.c ****        of the running thread requesting the mutex.*/
 125:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     Thread *tp = mp->m_owner;
 310              		.loc 2 125 0
 311 0024 019B     		ldr	r3, [sp, #4]
 312 0026 9B68     		ldr	r3, [r3, #8]
 313 0028 0393     		str	r3, [sp, #12]
 126:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     /* Does the running thread have higher priority than the mutex
 127:/usr/src/chibiostest/os/kernel/src/chmtx.c ****        owning thread? */
 128:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     while (tp->p_prio < ctp->p_prio) {
 314              		.loc 2 128 0
 315 002a 34E0     		b	.L16
 316              	.L22:
 129:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       /* Make priority of thread tp match the running thread's priority.*/
 130:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       tp->p_prio = ctp->p_prio;
 317              		.loc 2 130 0
 318 002c 029B     		ldr	r3, [sp, #8]
 319 002e 9A68     		ldr	r2, [r3, #8]
 320 0030 039B     		ldr	r3, [sp, #12]
 321 0032 9A60     		str	r2, [r3, #8]
 131:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       /* The following states need priority queues reordering.*/
 132:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       switch (tp->p_state) {
 322              		.loc 2 132 0
 323 0034 039B     		ldr	r3, [sp, #12]
 324 0036 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 325 003a 042B     		cmp	r3, #4
 326 003c 04D0     		beq	.L18
 327 003e 052B     		cmp	r3, #5
 328 0040 11D0     		beq	.L19
 329 0042 002B     		cmp	r3, #0
 330 0044 1AD0     		beq	.L20
 133:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       case THD_STATE_WTMTX:
 134:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         /* Re-enqueues the mutex owner with its new priority.*/
 135:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         prio_insert(dequeue(tp), (ThreadsQueue *)tp->p_u.wtobjp);
 136:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         tp = ((Mutex *)tp->p_u.wtobjp)->m_owner;
 137:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         continue;
 138:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #if CH_USE_CONDVARS |                                                       \
 139:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     (CH_USE_SEMAPHORES && CH_USE_SEMAPHORES_PRIORITY) |                     \
 140:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     (CH_USE_MESSAGES && CH_USE_MESSAGES_PRIORITY)
 141:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #if CH_USE_CONDVARS
 142:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       case THD_STATE_WTCOND:
 143:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #endif
 144:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #if CH_USE_SEMAPHORES && CH_USE_SEMAPHORES_PRIORITY
 145:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       case THD_STATE_WTSEM:
 146:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #endif
 147:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #if CH_USE_MESSAGES && CH_USE_MESSAGES_PRIORITY
 148:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       case THD_STATE_SNDMSGQ:
 149:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #endif
 150:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         /* Re-enqueues tp with its new priority on the queue.*/
 151:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         prio_insert(dequeue(tp), (ThreadsQueue *)tp->p_u.wtobjp);
 152:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         break;
 153:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #endif
 154:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       case THD_STATE_READY:
 155:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #if CH_DBG_ENABLE_ASSERTS
 156:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         /* Prevents an assertion in chSchReadyI().*/
 157:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         tp->p_state = THD_STATE_CURRENT;
 158:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #endif
 159:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         /* Re-enqueues tp with its new priority on the ready list.*/
 160:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         chSchReadyI(dequeue(tp));
 161:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         break;
 162:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       }
 163:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       break;
 331              		.loc 2 163 0
 332 0046 2CE0     		b	.L21
 333              	.L18:
 135:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         tp = ((Mutex *)tp->p_u.wtobjp)->m_owner;
 334              		.loc 2 135 0
 335 0048 0398     		ldr	r0, [sp, #12]
 336 004a FFF7FEFF 		bl	dequeue
 337 004e 0246     		mov	r2, r0
 338 0050 039B     		ldr	r3, [sp, #12]
 339 0052 9B6A     		ldr	r3, [r3, #40]
 340 0054 1046     		mov	r0, r2
 341 0056 1946     		mov	r1, r3
 342 0058 FFF7FEFF 		bl	prio_insert
 136:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         continue;
 343              		.loc 2 136 0
 344 005c 039B     		ldr	r3, [sp, #12]
 345 005e 9B6A     		ldr	r3, [r3, #40]
 346 0060 9B68     		ldr	r3, [r3, #8]
 347 0062 0393     		str	r3, [sp, #12]
 137:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #if CH_USE_CONDVARS |                                                       \
 348              		.loc 2 137 0
 349 0064 17E0     		b	.L16
 350              	.L19:
 151:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         break;
 351              		.loc 2 151 0
 352 0066 0398     		ldr	r0, [sp, #12]
 353 0068 FFF7FEFF 		bl	dequeue
 354 006c 0246     		mov	r2, r0
 355 006e 039B     		ldr	r3, [sp, #12]
 356 0070 9B6A     		ldr	r3, [r3, #40]
 357 0072 1046     		mov	r0, r2
 358 0074 1946     		mov	r1, r3
 359 0076 FFF7FEFF 		bl	prio_insert
 152:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #endif
 360              		.loc 2 152 0
 361 007a 0BE0     		b	.L17
 362              	.L20:
 157:/usr/src/chibiostest/os/kernel/src/chmtx.c **** #endif
 363              		.loc 2 157 0
 364 007c 039B     		ldr	r3, [sp, #12]
 365 007e 0122     		movs	r2, #1
 366 0080 83F82020 		strb	r2, [r3, #32]
 160:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         break;
 367              		.loc 2 160 0
 368 0084 0398     		ldr	r0, [sp, #12]
 369 0086 FFF7FEFF 		bl	dequeue
 370 008a 0346     		mov	r3, r0
 371 008c 1846     		mov	r0, r3
 372 008e FFF7FEFF 		bl	chSchReadyI
 161:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       }
 373              		.loc 2 161 0
 374 0092 00BF     		nop
 375              	.L17:
 376              		.loc 2 163 0
 377 0094 05E0     		b	.L21
 378              	.L16:
 128:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       /* Make priority of thread tp match the running thread's priority.*/
 379              		.loc 2 128 0 discriminator 1
 380 0096 039B     		ldr	r3, [sp, #12]
 381 0098 9A68     		ldr	r2, [r3, #8]
 382 009a 029B     		ldr	r3, [sp, #8]
 383 009c 9B68     		ldr	r3, [r3, #8]
 384 009e 9A42     		cmp	r2, r3
 385 00a0 C4D3     		bcc	.L22
 386              	.L21:
 164:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     }
 165:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     /* Sleep on the mutex.*/
 166:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     prio_insert(ctp, &mp->m_queue);
 387              		.loc 2 166 0
 388 00a2 019B     		ldr	r3, [sp, #4]
 389 00a4 0298     		ldr	r0, [sp, #8]
 390 00a6 1946     		mov	r1, r3
 391 00a8 FFF7FEFF 		bl	prio_insert
 167:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ctp->p_u.wtobjp = mp;
 392              		.loc 2 167 0
 393 00ac 029B     		ldr	r3, [sp, #8]
 394 00ae 019A     		ldr	r2, [sp, #4]
 395 00b0 9A62     		str	r2, [r3, #40]
 168:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     chSchGoSleepS(THD_STATE_WTMTX);
 396              		.loc 2 168 0
 397 00b2 0420     		movs	r0, #4
 398 00b4 FFF7FEFF 		bl	chSchGoSleepS
 169:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     /* It is assumed that the thread performing the unlock operation assigns
 170:/usr/src/chibiostest/os/kernel/src/chmtx.c ****        the mutex to this thread.*/
 171:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     chDbgAssert(mp->m_owner == ctp, "chMtxLockS(), #1", "not owner");
 399              		.loc 2 171 0
 400 00b8 019B     		ldr	r3, [sp, #4]
 401 00ba 9A68     		ldr	r2, [r3, #8]
 402 00bc 029B     		ldr	r3, [sp, #8]
 403 00be 9A42     		cmp	r2, r3
 404 00c0 02D0     		beq	.L23
 405              		.loc 2 171 0 is_stmt 0 discriminator 1
 406 00c2 0F48     		ldr	r0, .L26+8
 407 00c4 FFF7FEFF 		bl	chDbgPanic
 408              	.L23:
 172:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     chDbgAssert(ctp->p_mtxlist == mp, "chMtxLockS(), #2", "not owned");
 409              		.loc 2 172 0 is_stmt 1
 410 00c8 029B     		ldr	r3, [sp, #8]
 411 00ca 1A6C     		ldr	r2, [r3, #64]
 412 00cc 019B     		ldr	r3, [sp, #4]
 413 00ce 9A42     		cmp	r2, r3
 414 00d0 03D0     		beq	.L24
 415              		.loc 2 172 0 is_stmt 0 discriminator 1
 416 00d2 0C48     		ldr	r0, .L26+12
 417 00d4 FFF7FEFF 		bl	chDbgPanic
 418              	.LBE4:
 419 00d8 0AE0     		b	.L13
 420              	.L24:
 421 00da 09E0     		b	.L13
 422              	.L15:
 173:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   }
 174:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   else {
 175:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     /* It was not owned, inserted in the owned mutexes list.*/
 176:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     mp->m_owner = ctp;
 423              		.loc 2 176 0 is_stmt 1
 424 00dc 019B     		ldr	r3, [sp, #4]
 425 00de 029A     		ldr	r2, [sp, #8]
 426 00e0 9A60     		str	r2, [r3, #8]
 177:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     mp->m_next = ctp->p_mtxlist;
 427              		.loc 2 177 0
 428 00e2 029B     		ldr	r3, [sp, #8]
 429 00e4 1A6C     		ldr	r2, [r3, #64]
 430 00e6 019B     		ldr	r3, [sp, #4]
 431 00e8 DA60     		str	r2, [r3, #12]
 178:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ctp->p_mtxlist = mp;
 432              		.loc 2 178 0
 433 00ea 029B     		ldr	r3, [sp, #8]
 434 00ec 019A     		ldr	r2, [sp, #4]
 435 00ee 1A64     		str	r2, [r3, #64]
 436              	.L13:
 179:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   }
 180:/usr/src/chibiostest/os/kernel/src/chmtx.c **** }
 437              		.loc 2 180 0
 438 00f0 05B0     		add	sp, sp, #20
 439              		@ sp needed
 440 00f2 5DF804FB 		ldr	pc, [sp], #4
 441              	.L27:
 442 00f6 00BF     		.align	2
 443              	.L26:
 444 00f8 00000000 		.word	rlist
 445 00fc 10000000 		.word	.LC1
 446 0100 20000000 		.word	.LC2
 447 0104 34000000 		.word	.LC3
 448              		.cfi_endproc
 449              	.LFE9:
 451 0108 AFF30080 		.section	.text.chMtxTryLock,"ax",%progbits
 451      AFF30080 
 452              		.align	2
 453              		.p2align 4,,15
 454              		.global	chMtxTryLock
 455              		.thumb
 456              		.thumb_func
 458              	chMtxTryLock:
 459              	.LFB10:
 181:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 182:/usr/src/chibiostest/os/kernel/src/chmtx.c **** /**
 183:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @brief   Tries to lock a mutex.
 184:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @details This function attempts to lock a mutex, if the mutex is already
 185:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          locked by another thread then the function exits without waiting.
 186:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 187:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          mutexes.
 188:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @note    This function does not have any overhead related to the
 189:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          priority inheritance mechanism because it does not try to
 190:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          enter a sleep state.
 191:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
 192:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @param[in] mp        pointer to the @p Mutex structure
 193:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @return              The operation status.
 194:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @retval TRUE         if the mutex has been successfully acquired
 195:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @retval FALSE        if the lock attempt failed.
 196:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
 197:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @api
 198:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  */
 199:/usr/src/chibiostest/os/kernel/src/chmtx.c **** bool_t chMtxTryLock(Mutex *mp) {
 460              		.loc 2 199 0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 16
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464 0000 00B5     		push	{lr}
 465              		.cfi_def_cfa_offset 4
 466              		.cfi_offset 14, -4
 467 0002 85B0     		sub	sp, sp, #20
 468              		.cfi_def_cfa_offset 24
 469 0004 0190     		str	r0, [sp, #4]
 470              	.LBB5:
 200:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   bool_t b;
 201:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 202:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chSysLock();
 471              		.loc 2 202 0
 472 0006 2023     		movs	r3, #32
 473              	@ 202 "/usr/src/chibiostest/os/kernel/src/chmtx.c" 1
 474 0008 83F31188 		msr     BASEPRI, r3
 475              	@ 0 "" 2
 476              		.thumb
 477              	.LBE5:
 478 000c FFF7FEFF 		bl	dbg_check_lock
 203:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 204:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   b = chMtxTryLockS(mp);
 479              		.loc 2 204 0
 480 0010 0198     		ldr	r0, [sp, #4]
 481 0012 FFF7FEFF 		bl	chMtxTryLockS
 482 0016 0390     		str	r0, [sp, #12]
 205:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 206:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chSysUnlock();
 483              		.loc 2 206 0
 484 0018 FFF7FEFF 		bl	dbg_check_unlock
 485              	.LBB6:
 486 001c 0023     		movs	r3, #0
 487              	@ 206 "/usr/src/chibiostest/os/kernel/src/chmtx.c" 1
 488 001e 83F31188 		msr     BASEPRI, r3
 489              	@ 0 "" 2
 490              		.thumb
 491              	.LBE6:
 207:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   return b;
 492              		.loc 2 207 0
 493 0022 039B     		ldr	r3, [sp, #12]
 208:/usr/src/chibiostest/os/kernel/src/chmtx.c **** }
 494              		.loc 2 208 0
 495 0024 1846     		mov	r0, r3
 496 0026 05B0     		add	sp, sp, #20
 497              		@ sp needed
 498 0028 5DF804FB 		ldr	pc, [sp], #4
 499              		.cfi_endproc
 500              	.LFE10:
 502 002c AFF30080 		.section	.rodata
 503 0045 000000   		.align	2
 504              	.LC4:
 505 0048 2263684D 		.ascii	"\"chMtxTryLockS\"()\000"
 505      74785472 
 505      794C6F63 
 505      6B532228 
 505      2900
 506              		.section	.text.chMtxTryLockS,"ax",%progbits
 507              		.align	2
 508              		.p2align 4,,15
 509              		.global	chMtxTryLockS
 510              		.thumb
 511              		.thumb_func
 513              	chMtxTryLockS:
 514              	.LFB11:
 209:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 210:/usr/src/chibiostest/os/kernel/src/chmtx.c **** /**
 211:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @brief   Tries to lock a mutex.
 212:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @details This function attempts to lock a mutex, if the mutex is already
 213:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          taken by another thread then the function exits without waiting.
 214:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 215:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          mutexes.
 216:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @note    This function does not have any overhead related to the
 217:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          priority inheritance mechanism because it does not try to
 218:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          enter a sleep state.
 219:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
 220:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @param[in] mp        pointer to the @p Mutex structure
 221:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @return              The operation status.
 222:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @retval TRUE         if the mutex has been successfully acquired
 223:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @retval FALSE        if the lock attempt failed.
 224:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
 225:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @sclass
 226:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  */
 227:/usr/src/chibiostest/os/kernel/src/chmtx.c **** bool_t chMtxTryLockS(Mutex *mp) {
 515              		.loc 2 227 0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 8
 518              		@ frame_needed = 0, uses_anonymous_args = 0
 519 0000 00B5     		push	{lr}
 520              		.cfi_def_cfa_offset 4
 521              		.cfi_offset 14, -4
 522 0002 83B0     		sub	sp, sp, #12
 523              		.cfi_def_cfa_offset 16
 524 0004 0190     		str	r0, [sp, #4]
 228:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 229:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chDbgCheckClassS();
 525              		.loc 2 229 0
 526 0006 FFF7FEFF 		bl	chDbgCheckClassS
 230:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chDbgCheck(mp != NULL, "chMtxTryLockS");
 527              		.loc 2 230 0
 528 000a 019B     		ldr	r3, [sp, #4]
 529 000c 002B     		cmp	r3, #0
 530 000e 02D1     		bne	.L31
 531              		.loc 2 230 0 is_stmt 0 discriminator 1
 532 0010 0D48     		ldr	r0, .L34
 533 0012 FFF7FEFF 		bl	chDbgPanic
 534              	.L31:
 231:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 232:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   if (mp->m_owner != NULL)
 535              		.loc 2 232 0 is_stmt 1
 536 0016 019B     		ldr	r3, [sp, #4]
 537 0018 9B68     		ldr	r3, [r3, #8]
 538 001a 002B     		cmp	r3, #0
 539 001c 01D0     		beq	.L32
 233:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     return FALSE;
 540              		.loc 2 233 0
 541 001e 0023     		movs	r3, #0
 542 0020 0DE0     		b	.L33
 543              	.L32:
 234:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   mp->m_owner = currp;
 544              		.loc 2 234 0
 545 0022 0A4B     		ldr	r3, .L34+4
 546 0024 9A69     		ldr	r2, [r3, #24]
 547 0026 019B     		ldr	r3, [sp, #4]
 548 0028 9A60     		str	r2, [r3, #8]
 235:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   mp->m_next = currp->p_mtxlist;
 549              		.loc 2 235 0
 550 002a 084B     		ldr	r3, .L34+4
 551 002c 9B69     		ldr	r3, [r3, #24]
 552 002e 1A6C     		ldr	r2, [r3, #64]
 553 0030 019B     		ldr	r3, [sp, #4]
 554 0032 DA60     		str	r2, [r3, #12]
 236:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   currp->p_mtxlist = mp;
 555              		.loc 2 236 0
 556 0034 054B     		ldr	r3, .L34+4
 557 0036 9B69     		ldr	r3, [r3, #24]
 558 0038 019A     		ldr	r2, [sp, #4]
 559 003a 1A64     		str	r2, [r3, #64]
 237:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   return TRUE;
 560              		.loc 2 237 0
 561 003c 0123     		movs	r3, #1
 562              	.L33:
 238:/usr/src/chibiostest/os/kernel/src/chmtx.c **** }
 563              		.loc 2 238 0
 564 003e 1846     		mov	r0, r3
 565 0040 03B0     		add	sp, sp, #12
 566              		@ sp needed
 567 0042 5DF804FB 		ldr	pc, [sp], #4
 568              	.L35:
 569 0046 00BF     		.align	2
 570              	.L34:
 571 0048 48000000 		.word	.LC4
 572 004c 00000000 		.word	rlist
 573              		.cfi_endproc
 574              	.LFE11:
 576              		.section	.rodata
 577 005a 0000     		.align	2
 578              	.LC5:
 579 005c 63684D74 		.ascii	"chMtxUnlock(), #1\000"
 579      78556E6C 
 579      6F636B28 
 579      292C2023 
 579      3100
 580 006e 0000     		.align	2
 581              	.LC6:
 582 0070 63684D74 		.ascii	"chMtxUnlock(), #2\000"
 582      78556E6C 
 582      6F636B28 
 582      292C2023 
 582      3200
 583              		.section	.text.chMtxUnlock,"ax",%progbits
 584              		.align	2
 585              		.p2align 4,,15
 586              		.global	chMtxUnlock
 587              		.thumb
 588              		.thumb_func
 590              	chMtxUnlock:
 591              	.LFB12:
 239:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 240:/usr/src/chibiostest/os/kernel/src/chmtx.c **** /**
 241:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @brief   Unlocks the next owned mutex in reverse lock order.
 242:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 243:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @post    The mutex is unlocked and removed from the per-thread stack of
 244:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          owned mutexes.
 245:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
 246:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @return              A pointer to the unlocked mutex.
 247:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
 248:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @api
 249:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  */
 250:/usr/src/chibiostest/os/kernel/src/chmtx.c **** Mutex *chMtxUnlock(void) {
 592              		.loc 2 250 0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 24
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596 0000 00B5     		push	{lr}
 597              		.cfi_def_cfa_offset 4
 598              		.cfi_offset 14, -4
 599 0002 87B0     		sub	sp, sp, #28
 600              		.cfi_def_cfa_offset 32
 251:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   Thread *ctp = currp;
 601              		.loc 2 251 0
 602 0004 314B     		ldr	r3, .L45
 603 0006 9B69     		ldr	r3, [r3, #24]
 604 0008 0393     		str	r3, [sp, #12]
 605              	.LBB7:
 252:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   Mutex *ump, *mp;
 253:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 254:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chSysLock();
 606              		.loc 2 254 0
 607 000a 2023     		movs	r3, #32
 608              	@ 254 "/usr/src/chibiostest/os/kernel/src/chmtx.c" 1
 609 000c 83F31188 		msr     BASEPRI, r3
 610              	@ 0 "" 2
 611              		.thumb
 612              	.LBE7:
 613 0010 FFF7FEFF 		bl	dbg_check_lock
 255:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chDbgAssert(ctp->p_mtxlist != NULL,
 614              		.loc 2 255 0
 615 0014 039B     		ldr	r3, [sp, #12]
 616 0016 1B6C     		ldr	r3, [r3, #64]
 617 0018 002B     		cmp	r3, #0
 618 001a 02D1     		bne	.L37
 619              		.loc 2 255 0 is_stmt 0 discriminator 1
 620 001c 2C48     		ldr	r0, .L45+4
 621 001e FFF7FEFF 		bl	chDbgPanic
 622              	.L37:
 256:/usr/src/chibiostest/os/kernel/src/chmtx.c ****               "chMtxUnlock(), #1",
 257:/usr/src/chibiostest/os/kernel/src/chmtx.c ****               "owned mutexes list empty");
 258:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chDbgAssert(ctp->p_mtxlist->m_owner == ctp,
 623              		.loc 2 258 0 is_stmt 1
 624 0022 039B     		ldr	r3, [sp, #12]
 625 0024 1B6C     		ldr	r3, [r3, #64]
 626 0026 9A68     		ldr	r2, [r3, #8]
 627 0028 039B     		ldr	r3, [sp, #12]
 628 002a 9A42     		cmp	r2, r3
 629 002c 02D0     		beq	.L38
 630              		.loc 2 258 0 is_stmt 0 discriminator 1
 631 002e 2948     		ldr	r0, .L45+8
 632 0030 FFF7FEFF 		bl	chDbgPanic
 633              	.L38:
 259:/usr/src/chibiostest/os/kernel/src/chmtx.c ****               "chMtxUnlock(), #2",
 260:/usr/src/chibiostest/os/kernel/src/chmtx.c ****               "ownership failure");
 261:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   /* Removes the top Mutex from the Thread's owned mutexes list and marks it
 262:/usr/src/chibiostest/os/kernel/src/chmtx.c ****      as not owned.*/
 263:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   ump = ctp->p_mtxlist;
 634              		.loc 2 263 0 is_stmt 1
 635 0034 039B     		ldr	r3, [sp, #12]
 636 0036 1B6C     		ldr	r3, [r3, #64]
 637 0038 0293     		str	r3, [sp, #8]
 264:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   ctp->p_mtxlist = ump->m_next;
 638              		.loc 2 264 0
 639 003a 029B     		ldr	r3, [sp, #8]
 640 003c DA68     		ldr	r2, [r3, #12]
 641 003e 039B     		ldr	r3, [sp, #12]
 642 0040 1A64     		str	r2, [r3, #64]
 265:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   /* If a thread is waiting on the mutex then the fun part begins.*/
 266:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   if (chMtxQueueNotEmptyS(ump)) {
 643              		.loc 2 266 0
 644 0042 029B     		ldr	r3, [sp, #8]
 645 0044 1A68     		ldr	r2, [r3]
 646 0046 029B     		ldr	r3, [sp, #8]
 647 0048 9A42     		cmp	r2, r3
 648 004a 32D0     		beq	.L39
 649              	.LBB8:
 267:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     Thread *tp;
 268:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 269:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     /* Recalculates the optimal thread priority by scanning the owned
 270:/usr/src/chibiostest/os/kernel/src/chmtx.c ****        mutexes list.*/
 271:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     tprio_t newprio = ctp->p_realprio;
 650              		.loc 2 271 0
 651 004c 039B     		ldr	r3, [sp, #12]
 652 004e 5B6C     		ldr	r3, [r3, #68]
 653 0050 0493     		str	r3, [sp, #16]
 272:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     mp = ctp->p_mtxlist;
 654              		.loc 2 272 0
 655 0052 039B     		ldr	r3, [sp, #12]
 656 0054 1B6C     		ldr	r3, [r3, #64]
 657 0056 0593     		str	r3, [sp, #20]
 273:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     while (mp != NULL) {
 658              		.loc 2 273 0
 659 0058 11E0     		b	.L40
 660              	.L42:
 274:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       /* If the highest priority thread waiting in the mutexes list has a
 275:/usr/src/chibiostest/os/kernel/src/chmtx.c ****          greater priority than the current thread base priority then the final
 276:/usr/src/chibiostest/os/kernel/src/chmtx.c ****          priority will have at least that priority.*/
 277:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       if (chMtxQueueNotEmptyS(mp) && (mp->m_queue.p_next->p_prio > newprio))
 661              		.loc 2 277 0
 662 005a 059B     		ldr	r3, [sp, #20]
 663 005c 1A68     		ldr	r2, [r3]
 664 005e 059B     		ldr	r3, [sp, #20]
 665 0060 9A42     		cmp	r2, r3
 666 0062 09D0     		beq	.L41
 667              		.loc 2 277 0 is_stmt 0 discriminator 1
 668 0064 059B     		ldr	r3, [sp, #20]
 669 0066 1B68     		ldr	r3, [r3]
 670 0068 9A68     		ldr	r2, [r3, #8]
 671 006a 049B     		ldr	r3, [sp, #16]
 672 006c 9A42     		cmp	r2, r3
 673 006e 03D9     		bls	.L41
 278:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         newprio = mp->m_queue.p_next->p_prio;
 674              		.loc 2 278 0 is_stmt 1
 675 0070 059B     		ldr	r3, [sp, #20]
 676 0072 1B68     		ldr	r3, [r3]
 677 0074 9B68     		ldr	r3, [r3, #8]
 678 0076 0493     		str	r3, [sp, #16]
 679              	.L41:
 279:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       mp = mp->m_next;
 680              		.loc 2 279 0
 681 0078 059B     		ldr	r3, [sp, #20]
 682 007a DB68     		ldr	r3, [r3, #12]
 683 007c 0593     		str	r3, [sp, #20]
 684              	.L40:
 273:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       /* If the highest priority thread waiting in the mutexes list has a
 685              		.loc 2 273 0 discriminator 1
 686 007e 059B     		ldr	r3, [sp, #20]
 687 0080 002B     		cmp	r3, #0
 688 0082 EAD1     		bne	.L42
 280:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     }
 281:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     /* Assigns to the current thread the highest priority among all the
 282:/usr/src/chibiostest/os/kernel/src/chmtx.c ****        waiting threads.*/
 283:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ctp->p_prio = newprio;
 689              		.loc 2 283 0
 690 0084 039B     		ldr	r3, [sp, #12]
 691 0086 049A     		ldr	r2, [sp, #16]
 692 0088 9A60     		str	r2, [r3, #8]
 284:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     /* Awakens the highest priority thread waiting for the unlocked mutex and
 285:/usr/src/chibiostest/os/kernel/src/chmtx.c ****        assigns the mutex to it.*/
 286:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     tp = fifo_remove(&ump->m_queue);
 693              		.loc 2 286 0
 694 008a 029B     		ldr	r3, [sp, #8]
 695 008c 1846     		mov	r0, r3
 696 008e FFF7FEFF 		bl	fifo_remove
 697 0092 0190     		str	r0, [sp, #4]
 287:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ump->m_owner = tp;
 698              		.loc 2 287 0
 699 0094 029B     		ldr	r3, [sp, #8]
 700 0096 019A     		ldr	r2, [sp, #4]
 701 0098 9A60     		str	r2, [r3, #8]
 288:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ump->m_next = tp->p_mtxlist;
 702              		.loc 2 288 0
 703 009a 019B     		ldr	r3, [sp, #4]
 704 009c 1A6C     		ldr	r2, [r3, #64]
 705 009e 029B     		ldr	r3, [sp, #8]
 706 00a0 DA60     		str	r2, [r3, #12]
 289:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     tp->p_mtxlist = ump;
 707              		.loc 2 289 0
 708 00a2 019B     		ldr	r3, [sp, #4]
 709 00a4 029A     		ldr	r2, [sp, #8]
 710 00a6 1A64     		str	r2, [r3, #64]
 290:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     chSchWakeupS(tp, RDY_OK);
 711              		.loc 2 290 0
 712 00a8 0198     		ldr	r0, [sp, #4]
 713 00aa 0021     		movs	r1, #0
 714 00ac FFF7FEFF 		bl	chSchWakeupS
 715              	.LBE8:
 716 00b0 02E0     		b	.L43
 717              	.L39:
 291:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   }
 292:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   else
 293:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ump->m_owner = NULL;
 718              		.loc 2 293 0
 719 00b2 029B     		ldr	r3, [sp, #8]
 720 00b4 0022     		movs	r2, #0
 721 00b6 9A60     		str	r2, [r3, #8]
 722              	.L43:
 294:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chSysUnlock();
 723              		.loc 2 294 0
 724 00b8 FFF7FEFF 		bl	dbg_check_unlock
 725              	.LBB9:
 726 00bc 0023     		movs	r3, #0
 727              	@ 294 "/usr/src/chibiostest/os/kernel/src/chmtx.c" 1
 728 00be 83F31188 		msr     BASEPRI, r3
 729              	@ 0 "" 2
 730              		.thumb
 731              	.LBE9:
 295:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   return ump;
 732              		.loc 2 295 0
 733 00c2 029B     		ldr	r3, [sp, #8]
 296:/usr/src/chibiostest/os/kernel/src/chmtx.c **** }
 734              		.loc 2 296 0
 735 00c4 1846     		mov	r0, r3
 736 00c6 07B0     		add	sp, sp, #28
 737              		@ sp needed
 738 00c8 5DF804FB 		ldr	pc, [sp], #4
 739              	.L46:
 740              		.align	2
 741              	.L45:
 742 00cc 00000000 		.word	rlist
 743 00d0 5C000000 		.word	.LC5
 744 00d4 70000000 		.word	.LC6
 745              		.cfi_endproc
 746              	.LFE12:
 748 00d8 AFF30080 		.section	.rodata
 748      AFF30080 
 749 0082 0000     		.align	2
 750              	.LC7:
 751 0084 63684D74 		.ascii	"chMtxUnlockS(), #1\000"
 751      78556E6C 
 751      6F636B53 
 751      28292C20 
 751      233100
 752 0097 00       		.align	2
 753              	.LC8:
 754 0098 63684D74 		.ascii	"chMtxUnlockS(), #2\000"
 754      78556E6C 
 754      6F636B53 
 754      28292C20 
 754      233200
 755 00ab 00       		.section	.text.chMtxUnlockS,"ax",%progbits
 756              		.align	2
 757              		.p2align 4,,15
 758              		.global	chMtxUnlockS
 759              		.thumb
 760              		.thumb_func
 762              	chMtxUnlockS:
 763              	.LFB13:
 297:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 298:/usr/src/chibiostest/os/kernel/src/chmtx.c **** /**
 299:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @brief   Unlocks the next owned mutex in reverse lock order.
 300:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 301:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @post    The mutex is unlocked and removed from the per-thread stack of
 302:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          owned mutexes.
 303:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @post    This function does not reschedule so a call to a rescheduling
 304:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          function must be performed before unlocking the kernel.
 305:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
 306:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @return              A pointer to the unlocked mutex.
 307:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
 308:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @sclass
 309:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  */
 310:/usr/src/chibiostest/os/kernel/src/chmtx.c **** Mutex *chMtxUnlockS(void) {
 764              		.loc 2 310 0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 24
 767              		@ frame_needed = 0, uses_anonymous_args = 0
 768 0000 00B5     		push	{lr}
 769              		.cfi_def_cfa_offset 4
 770              		.cfi_offset 14, -4
 771 0002 87B0     		sub	sp, sp, #28
 772              		.cfi_def_cfa_offset 32
 311:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   Thread *ctp = currp;
 773              		.loc 2 311 0
 774 0004 2D4B     		ldr	r3, .L56
 775 0006 9B69     		ldr	r3, [r3, #24]
 776 0008 0393     		str	r3, [sp, #12]
 312:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   Mutex *ump, *mp;
 313:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 314:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chDbgCheckClassS();
 777              		.loc 2 314 0
 778 000a FFF7FEFF 		bl	chDbgCheckClassS
 315:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chDbgAssert(ctp->p_mtxlist != NULL,
 779              		.loc 2 315 0
 780 000e 039B     		ldr	r3, [sp, #12]
 781 0010 1B6C     		ldr	r3, [r3, #64]
 782 0012 002B     		cmp	r3, #0
 783 0014 02D1     		bne	.L48
 784              		.loc 2 315 0 is_stmt 0 discriminator 1
 785 0016 2A48     		ldr	r0, .L56+4
 786 0018 FFF7FEFF 		bl	chDbgPanic
 787              	.L48:
 316:/usr/src/chibiostest/os/kernel/src/chmtx.c ****               "chMtxUnlockS(), #1",
 317:/usr/src/chibiostest/os/kernel/src/chmtx.c ****               "owned mutexes list empty");
 318:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chDbgAssert(ctp->p_mtxlist->m_owner == ctp,
 788              		.loc 2 318 0 is_stmt 1
 789 001c 039B     		ldr	r3, [sp, #12]
 790 001e 1B6C     		ldr	r3, [r3, #64]
 791 0020 9A68     		ldr	r2, [r3, #8]
 792 0022 039B     		ldr	r3, [sp, #12]
 793 0024 9A42     		cmp	r2, r3
 794 0026 02D0     		beq	.L49
 795              		.loc 2 318 0 is_stmt 0 discriminator 1
 796 0028 2648     		ldr	r0, .L56+8
 797 002a FFF7FEFF 		bl	chDbgPanic
 798              	.L49:
 319:/usr/src/chibiostest/os/kernel/src/chmtx.c ****               "chMtxUnlockS(), #2",
 320:/usr/src/chibiostest/os/kernel/src/chmtx.c ****               "ownership failure");
 321:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 322:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   /* Removes the top Mutex from the owned mutexes list and marks it as not
 323:/usr/src/chibiostest/os/kernel/src/chmtx.c ****      owned.*/
 324:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   ump = ctp->p_mtxlist;
 799              		.loc 2 324 0 is_stmt 1
 800 002e 039B     		ldr	r3, [sp, #12]
 801 0030 1B6C     		ldr	r3, [r3, #64]
 802 0032 0293     		str	r3, [sp, #8]
 325:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   ctp->p_mtxlist = ump->m_next;
 803              		.loc 2 325 0
 804 0034 029B     		ldr	r3, [sp, #8]
 805 0036 DA68     		ldr	r2, [r3, #12]
 806 0038 039B     		ldr	r3, [sp, #12]
 807 003a 1A64     		str	r2, [r3, #64]
 326:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   /* If a thread is waiting on the mutex then the fun part begins.*/
 327:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   if (chMtxQueueNotEmptyS(ump)) {
 808              		.loc 2 327 0
 809 003c 029B     		ldr	r3, [sp, #8]
 810 003e 1A68     		ldr	r2, [r3]
 811 0040 029B     		ldr	r3, [sp, #8]
 812 0042 9A42     		cmp	r2, r3
 813 0044 31D0     		beq	.L50
 814              	.LBB10:
 328:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     Thread *tp;
 329:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 330:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     /* Recalculates the optimal thread priority by scanning the owned
 331:/usr/src/chibiostest/os/kernel/src/chmtx.c ****        mutexes list.*/
 332:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     tprio_t newprio = ctp->p_realprio;
 815              		.loc 2 332 0
 816 0046 039B     		ldr	r3, [sp, #12]
 817 0048 5B6C     		ldr	r3, [r3, #68]
 818 004a 0493     		str	r3, [sp, #16]
 333:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     mp = ctp->p_mtxlist;
 819              		.loc 2 333 0
 820 004c 039B     		ldr	r3, [sp, #12]
 821 004e 1B6C     		ldr	r3, [r3, #64]
 822 0050 0593     		str	r3, [sp, #20]
 334:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     while (mp != NULL) {
 823              		.loc 2 334 0
 824 0052 11E0     		b	.L51
 825              	.L53:
 335:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       /* If the highest priority thread waiting in the mutexes list has a
 336:/usr/src/chibiostest/os/kernel/src/chmtx.c ****          greater priority than the current thread base priority then the final
 337:/usr/src/chibiostest/os/kernel/src/chmtx.c ****          priority will have at least that priority.*/
 338:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       if (chMtxQueueNotEmptyS(mp) && (mp->m_queue.p_next->p_prio > newprio))
 826              		.loc 2 338 0
 827 0054 059B     		ldr	r3, [sp, #20]
 828 0056 1A68     		ldr	r2, [r3]
 829 0058 059B     		ldr	r3, [sp, #20]
 830 005a 9A42     		cmp	r2, r3
 831 005c 09D0     		beq	.L52
 832              		.loc 2 338 0 is_stmt 0 discriminator 1
 833 005e 059B     		ldr	r3, [sp, #20]
 834 0060 1B68     		ldr	r3, [r3]
 835 0062 9A68     		ldr	r2, [r3, #8]
 836 0064 049B     		ldr	r3, [sp, #16]
 837 0066 9A42     		cmp	r2, r3
 838 0068 03D9     		bls	.L52
 339:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         newprio = mp->m_queue.p_next->p_prio;
 839              		.loc 2 339 0 is_stmt 1
 840 006a 059B     		ldr	r3, [sp, #20]
 841 006c 1B68     		ldr	r3, [r3]
 842 006e 9B68     		ldr	r3, [r3, #8]
 843 0070 0493     		str	r3, [sp, #16]
 844              	.L52:
 340:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       mp = mp->m_next;
 845              		.loc 2 340 0
 846 0072 059B     		ldr	r3, [sp, #20]
 847 0074 DB68     		ldr	r3, [r3, #12]
 848 0076 0593     		str	r3, [sp, #20]
 849              	.L51:
 334:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       /* If the highest priority thread waiting in the mutexes list has a
 850              		.loc 2 334 0 discriminator 1
 851 0078 059B     		ldr	r3, [sp, #20]
 852 007a 002B     		cmp	r3, #0
 853 007c EAD1     		bne	.L53
 341:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     }
 342:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ctp->p_prio = newprio;
 854              		.loc 2 342 0
 855 007e 039B     		ldr	r3, [sp, #12]
 856 0080 049A     		ldr	r2, [sp, #16]
 857 0082 9A60     		str	r2, [r3, #8]
 343:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     /* Awakens the highest priority thread waiting for the unlocked mutex and
 344:/usr/src/chibiostest/os/kernel/src/chmtx.c ****        assigns the mutex to it.*/
 345:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     tp = fifo_remove(&ump->m_queue);
 858              		.loc 2 345 0
 859 0084 029B     		ldr	r3, [sp, #8]
 860 0086 1846     		mov	r0, r3
 861 0088 FFF7FEFF 		bl	fifo_remove
 862 008c 0190     		str	r0, [sp, #4]
 346:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ump->m_owner = tp;
 863              		.loc 2 346 0
 864 008e 029B     		ldr	r3, [sp, #8]
 865 0090 019A     		ldr	r2, [sp, #4]
 866 0092 9A60     		str	r2, [r3, #8]
 347:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ump->m_next = tp->p_mtxlist;
 867              		.loc 2 347 0
 868 0094 019B     		ldr	r3, [sp, #4]
 869 0096 1A6C     		ldr	r2, [r3, #64]
 870 0098 029B     		ldr	r3, [sp, #8]
 871 009a DA60     		str	r2, [r3, #12]
 348:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     tp->p_mtxlist = ump;
 872              		.loc 2 348 0
 873 009c 019B     		ldr	r3, [sp, #4]
 874 009e 029A     		ldr	r2, [sp, #8]
 875 00a0 1A64     		str	r2, [r3, #64]
 349:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     chSchReadyI(tp);
 876              		.loc 2 349 0
 877 00a2 0198     		ldr	r0, [sp, #4]
 878 00a4 FFF7FEFF 		bl	chSchReadyI
 879              	.LBE10:
 880 00a8 02E0     		b	.L54
 881              	.L50:
 350:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   }
 351:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   else
 352:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ump->m_owner = NULL;
 882              		.loc 2 352 0
 883 00aa 029B     		ldr	r3, [sp, #8]
 884 00ac 0022     		movs	r2, #0
 885 00ae 9A60     		str	r2, [r3, #8]
 886              	.L54:
 353:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   return ump;
 887              		.loc 2 353 0
 888 00b0 029B     		ldr	r3, [sp, #8]
 354:/usr/src/chibiostest/os/kernel/src/chmtx.c **** }
 889              		.loc 2 354 0
 890 00b2 1846     		mov	r0, r3
 891 00b4 07B0     		add	sp, sp, #28
 892              		@ sp needed
 893 00b6 5DF804FB 		ldr	pc, [sp], #4
 894              	.L57:
 895 00ba 00BF     		.align	2
 896              	.L56:
 897 00bc 00000000 		.word	rlist
 898 00c0 84000000 		.word	.LC7
 899 00c4 98000000 		.word	.LC8
 900              		.cfi_endproc
 901              	.LFE13:
 903 00c8 AFF30080 		.section	.text.chMtxUnlockAll,"ax",%progbits
 903      AFF30080 
 904              		.align	2
 905              		.p2align 4,,15
 906              		.global	chMtxUnlockAll
 907              		.thumb
 908              		.thumb_func
 910              	chMtxUnlockAll:
 911              	.LFB14:
 355:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 356:/usr/src/chibiostest/os/kernel/src/chmtx.c **** /**
 357:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @brief   Unlocks all the mutexes owned by the invoking thread.
 358:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @post    The stack of owned mutexes is emptied and all the found
 359:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          mutexes are unlocked.
 360:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @note    This function is <b>MUCH MORE</b> efficient than releasing the
 361:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          mutexes one by one and not just because the call overhead,
 362:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          this function does not have any overhead related to the priority
 363:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *          inheritance mechanism.
 364:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  *
 365:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  * @api
 366:/usr/src/chibiostest/os/kernel/src/chmtx.c ****  */
 367:/usr/src/chibiostest/os/kernel/src/chmtx.c **** void chMtxUnlockAll(void) {
 912              		.loc 2 367 0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 16
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 916 0000 00B5     		push	{lr}
 917              		.cfi_def_cfa_offset 4
 918              		.cfi_offset 14, -4
 919 0002 85B0     		sub	sp, sp, #20
 920              		.cfi_def_cfa_offset 24
 368:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   Thread *ctp = currp;
 921              		.loc 2 368 0
 922 0004 1F4B     		ldr	r3, .L63
 923 0006 9B69     		ldr	r3, [r3, #24]
 924 0008 0393     		str	r3, [sp, #12]
 925              	.LBB11:
 369:/usr/src/chibiostest/os/kernel/src/chmtx.c **** 
 370:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chSysLock();
 926              		.loc 2 370 0
 927 000a 2023     		movs	r3, #32
 928              	@ 370 "/usr/src/chibiostest/os/kernel/src/chmtx.c" 1
 929 000c 83F31188 		msr     BASEPRI, r3
 930              	@ 0 "" 2
 931              		.thumb
 932              	.LBE11:
 933 0010 FFF7FEFF 		bl	dbg_check_lock
 371:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   if (ctp->p_mtxlist != NULL) {
 934              		.loc 2 371 0
 935 0014 039B     		ldr	r3, [sp, #12]
 936 0016 1B6C     		ldr	r3, [r3, #64]
 937 0018 002B     		cmp	r3, #0
 938 001a 2BD0     		beq	.L59
 939              	.L62:
 940              	.LBB12:
 372:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     do {
 373:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       Mutex *ump = ctp->p_mtxlist;
 941              		.loc 2 373 0
 942 001c 039B     		ldr	r3, [sp, #12]
 943 001e 1B6C     		ldr	r3, [r3, #64]
 944 0020 0293     		str	r3, [sp, #8]
 374:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       ctp->p_mtxlist = ump->m_next;
 945              		.loc 2 374 0
 946 0022 029B     		ldr	r3, [sp, #8]
 947 0024 DA68     		ldr	r2, [r3, #12]
 948 0026 039B     		ldr	r3, [sp, #12]
 949 0028 1A64     		str	r2, [r3, #64]
 375:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       if (chMtxQueueNotEmptyS(ump)) {
 950              		.loc 2 375 0
 951 002a 029B     		ldr	r3, [sp, #8]
 952 002c 1A68     		ldr	r2, [r3]
 953 002e 029B     		ldr	r3, [sp, #8]
 954 0030 9A42     		cmp	r2, r3
 955 0032 12D0     		beq	.L60
 956              	.LBB13:
 376:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         Thread *tp = fifo_remove(&ump->m_queue);
 957              		.loc 2 376 0
 958 0034 029B     		ldr	r3, [sp, #8]
 959 0036 1846     		mov	r0, r3
 960 0038 FFF7FEFF 		bl	fifo_remove
 961 003c 0190     		str	r0, [sp, #4]
 377:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         ump->m_owner = tp;
 962              		.loc 2 377 0
 963 003e 029B     		ldr	r3, [sp, #8]
 964 0040 019A     		ldr	r2, [sp, #4]
 965 0042 9A60     		str	r2, [r3, #8]
 378:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         ump->m_next = tp->p_mtxlist;
 966              		.loc 2 378 0
 967 0044 019B     		ldr	r3, [sp, #4]
 968 0046 1A6C     		ldr	r2, [r3, #64]
 969 0048 029B     		ldr	r3, [sp, #8]
 970 004a DA60     		str	r2, [r3, #12]
 379:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         tp->p_mtxlist = ump;
 971              		.loc 2 379 0
 972 004c 019B     		ldr	r3, [sp, #4]
 973 004e 029A     		ldr	r2, [sp, #8]
 974 0050 1A64     		str	r2, [r3, #64]
 380:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         chSchReadyI(tp);
 975              		.loc 2 380 0
 976 0052 0198     		ldr	r0, [sp, #4]
 977 0054 FFF7FEFF 		bl	chSchReadyI
 978              	.LBE13:
 979 0058 02E0     		b	.L61
 980              	.L60:
 381:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       }
 382:/usr/src/chibiostest/os/kernel/src/chmtx.c ****       else
 383:/usr/src/chibiostest/os/kernel/src/chmtx.c ****         ump->m_owner = NULL;
 981              		.loc 2 383 0
 982 005a 029B     		ldr	r3, [sp, #8]
 983 005c 0022     		movs	r2, #0
 984 005e 9A60     		str	r2, [r3, #8]
 985              	.L61:
 986              	.LBE12:
 384:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     } while (ctp->p_mtxlist != NULL);
 987              		.loc 2 384 0
 988 0060 039B     		ldr	r3, [sp, #12]
 989 0062 1B6C     		ldr	r3, [r3, #64]
 990 0064 002B     		cmp	r3, #0
 991 0066 D9D1     		bne	.L62
 385:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     ctp->p_prio = ctp->p_realprio;
 992              		.loc 2 385 0
 993 0068 039B     		ldr	r3, [sp, #12]
 994 006a 5A6C     		ldr	r2, [r3, #68]
 995 006c 039B     		ldr	r3, [sp, #12]
 996 006e 9A60     		str	r2, [r3, #8]
 386:/usr/src/chibiostest/os/kernel/src/chmtx.c ****     chSchRescheduleS();
 997              		.loc 2 386 0
 998 0070 FFF7FEFF 		bl	chSchRescheduleS
 999              	.L59:
 387:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   }
 388:/usr/src/chibiostest/os/kernel/src/chmtx.c ****   chSysUnlock();
 1000              		.loc 2 388 0
 1001 0074 FFF7FEFF 		bl	dbg_check_unlock
 1002              	.LBB14:
 1003 0078 0023     		movs	r3, #0
 1004              	@ 388 "/usr/src/chibiostest/os/kernel/src/chmtx.c" 1
 1005 007a 83F31188 		msr     BASEPRI, r3
 1006              	@ 0 "" 2
 1007              		.thumb
 1008              	.LBE14:
 389:/usr/src/chibiostest/os/kernel/src/chmtx.c **** }
 1009              		.loc 2 389 0
 1010 007e 05B0     		add	sp, sp, #20
 1011              		@ sp needed
 1012 0080 5DF804FB 		ldr	pc, [sp], #4
 1013              	.L64:
 1014              		.align	2
 1015              	.L63:
 1016 0084 00000000 		.word	rlist
 1017              		.cfi_endproc
 1018              	.LFE14:
 1020 0088 AFF30080 		.text
 1020      AFF30080 
 1021              	.Letext0:
 1022              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1023              		.file 4 "/usr/include/newlib/stdint.h"
 1024              		.file 5 "/usr/src/chibiostest/os/ports/GCC/ARMCMx/chtypes.h"
 1025              		.file 6 "/usr/src/chibiostest/os/kernel/include/chlists.h"
 1026              		.file 7 "/usr/src/chibiostest/os/kernel/include/chthreads.h"
 1027              		.file 8 "/usr/src/chibiostest/os/ports/GCC/ARMCMx/chcore_v7m.h"
 1028              		.file 9 "/usr/src/chibiostest/os/kernel/include/chschd.h"
 1029              		.file 10 "/usr/src/chibiostest/os/kernel/include/chmtx.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmtx.c
     /tmp/ccpabo9A.s:20     .text.prio_insert:0000000000000000 $t
     /tmp/ccpabo9A.s:25     .text.prio_insert:0000000000000000 prio_insert
     /tmp/ccpabo9A.s:83     .text.fifo_remove:0000000000000000 $t
     /tmp/ccpabo9A.s:88     .text.fifo_remove:0000000000000000 fifo_remove
     /tmp/ccpabo9A.s:122    .text.dequeue:0000000000000000 $t
     /tmp/ccpabo9A.s:127    .text.dequeue:0000000000000000 dequeue
     /tmp/ccpabo9A.s:160    .rodata:0000000000000000 $d
     /tmp/ccpabo9A.s:164    .text.chMtxInit:0000000000000000 $t
     /tmp/ccpabo9A.s:170    .text.chMtxInit:0000000000000000 chMtxInit
     /tmp/ccpabo9A.s:210    .text.chMtxInit:000000000000002c $d
     /tmp/ccpabo9A.s:215    .text.chMtxLock:0000000000000000 $t
     /tmp/ccpabo9A.s:221    .text.chMtxLock:0000000000000000 chMtxLock
     /tmp/ccpabo9A.s:278    .text.chMtxLockS:0000000000000000 chMtxLockS
     /tmp/ccpabo9A.s:272    .text.chMtxLockS:0000000000000000 $t
     /tmp/ccpabo9A.s:444    .text.chMtxLockS:00000000000000f8 $d
     /tmp/ccpabo9A.s:452    .text.chMtxTryLock:0000000000000000 $t
     /tmp/ccpabo9A.s:458    .text.chMtxTryLock:0000000000000000 chMtxTryLock
     /tmp/ccpabo9A.s:513    .text.chMtxTryLockS:0000000000000000 chMtxTryLockS
     /tmp/ccpabo9A.s:507    .text.chMtxTryLockS:0000000000000000 $t
     /tmp/ccpabo9A.s:571    .text.chMtxTryLockS:0000000000000048 $d
     /tmp/ccpabo9A.s:584    .text.chMtxUnlock:0000000000000000 $t
     /tmp/ccpabo9A.s:590    .text.chMtxUnlock:0000000000000000 chMtxUnlock
     /tmp/ccpabo9A.s:742    .text.chMtxUnlock:00000000000000cc $d
     /tmp/ccpabo9A.s:756    .text.chMtxUnlockS:0000000000000000 $t
     /tmp/ccpabo9A.s:762    .text.chMtxUnlockS:0000000000000000 chMtxUnlockS
     /tmp/ccpabo9A.s:897    .text.chMtxUnlockS:00000000000000bc $d
     /tmp/ccpabo9A.s:904    .text.chMtxUnlockAll:0000000000000000 $t
     /tmp/ccpabo9A.s:910    .text.chMtxUnlockAll:0000000000000000 chMtxUnlockAll
     /tmp/ccpabo9A.s:1016   .text.chMtxUnlockAll:0000000000000084 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccpabo9A.s:451    .text.chMtxLockS:0000000000000108 $t
     /tmp/ccpabo9A.s:748    .text.chMtxUnlock:00000000000000d8 $t
     /tmp/ccpabo9A.s:903    .text.chMtxUnlockS:00000000000000c8 $t
     /tmp/ccpabo9A.s:1020   .text.chMtxUnlockAll:0000000000000088 $t

UNDEFINED SYMBOLS
chDbgPanic
dbg_check_lock
dbg_check_unlock
chDbgCheckClassS
chSchReadyI
chSchGoSleepS
rlist
chSchWakeupS
chSchRescheduleS
