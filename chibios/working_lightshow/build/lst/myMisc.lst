   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"myMisc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.SDU1,"aw",%nobits
  20              		.align	2
  23              	SDU1:
  24 0000 00000000 		.space	600
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.section	.rodata
  26              		.align	2
  27              	.LC0:
  28 0000 6D656D00 		.ascii	"mem\000"
  29              		.align	2
  30              	.LC1:
  31 0004 74687265 		.ascii	"threads\000"
  31      61647300 
  32              		.align	2
  33              	.LC2:
  34 000c 746F6767 		.ascii	"toggle\000"
  34      6C6500
  35 0013 00       		.align	2
  36              	.LC3:
  37 0014 7400     		.ascii	"t\000"
  38 0016 0000     		.align	2
  39              	.LC4:
  40 0018 626C696E 		.ascii	"blinkspeed\000"
  40      6B737065 
  40      656400
  41 0023 00       		.align	2
  42              	.LC5:
  43 0024 627300   		.ascii	"bs\000"
  44 0027 00       		.align	2
  45              	.LC6:
  46 0028 64697200 		.ascii	"dir\000"
  47              		.align	2
  48              	.LC7:
  49 002c 64697263 		.ascii	"dirch\000"
  49      6800
  50 0032 0000     		.align	2
  51              	.LC8:
  52 0034 61637475 		.ascii	"actual\000"
  52      616C00
  53 003b 00       		.align	2
  54              	.LC9:
  55 003c 62736D69 		.ascii	"bsmin\000"
  55      6E00
  56 0042 0000     		.align	2
  57              	.LC10:
  58 0044 62736D61 		.ascii	"bsmax\000"
  58      7800
  59 004a 0000     		.align	2
  60              	.LC11:
  61 004c 62736D69 		.ascii	"bsminch\000"
  61      6E636800 
  62              		.align	2
  63              	.LC12:
  64 0054 62736D61 		.ascii	"bsmaxch\000"
  64      78636800 
  65              		.section	.rodata.commands,"a",%progbits
  66              		.align	2
  69              	commands:
  70 0000 00000000 		.word	.LC0
  71 0004 00000000 		.word	cmd_mem
  72 0008 04000000 		.word	.LC1
  73 000c 00000000 		.word	cmd_threads
  74 0010 0C000000 		.word	.LC2
  75 0014 00000000 		.word	cmd_toggle
  76 0018 14000000 		.word	.LC3
  77 001c 00000000 		.word	cmd_toggle
  78 0020 18000000 		.word	.LC4
  79 0024 00000000 		.word	cmd_blinkspeed
  80 0028 24000000 		.word	.LC5
  81 002c 00000000 		.word	cmd_blinkspeed
  82 0030 28000000 		.word	.LC6
  83 0034 00000000 		.word	cmd_way
  84 0038 2C000000 		.word	.LC7
  85 003c 00000000 		.word	cmd_way_ch
  86 0040 34000000 		.word	.LC8
  87 0044 00000000 		.word	cmd_blinkspeed_now
  88 0048 3C000000 		.word	.LC9
  89 004c 00000000 		.word	cmd_blinkspeed_min
  90 0050 44000000 		.word	.LC10
  91 0054 00000000 		.word	cmd_blinkspeed_max
  92 0058 4C000000 		.word	.LC11
  93 005c 00000000 		.word	cmd_blinkspeed_min_ch
  94 0060 54000000 		.word	.LC12
  95 0064 00000000 		.word	cmd_blinkspeed_max_ch
  96 0068 00000000 		.word	0
  97 006c 00000000 		.word	0
  98              		.section	.rodata.shell_cfg1,"a",%progbits
  99              		.align	2
 102              	shell_cfg1:
 103 0000 00000000 		.word	SDU1
 104 0004 00000000 		.word	commands
 105              		.section	.bss.waThread1,"aw",%nobits
 106              		.align	3
 109              	waThread1:
 110 0000 00000000 		.space	440
 110      00000000 
 110      00000000 
 110      00000000 
 110      00000000 
 111              		.section	.rodata
 112              		.align	2
 113              	.LC13:
 114 005c 626C696E 		.ascii	"blinker1\000"
 114      6B657231 
 114      00
 115 0065 000000   		.section	.text.Thread1,"ax",%progbits
 116              		.align	2
 117              		.p2align 4,,15
 118              		.thumb
 119              		.thumb_func
 121              	Thread1:
 122              	.LFB118:
 123              		.file 1 "myMisc.c"
   1:myMisc.c      **** #include <stdlib.h>
   2:myMisc.c      **** #include <string.h>
   3:myMisc.c      **** #include <ctype.h>
   4:myMisc.c      **** 
   5:myMisc.c      **** #include "ch.h"
   6:myMisc.c      **** #include "hal.h"
   7:myMisc.c      **** 
   8:myMisc.c      **** #include "chprintf.h"
   9:myMisc.c      **** 
  10:myMisc.c      **** #include "myMisc.h"
  11:myMisc.c      **** #include "config.h"
  12:myMisc.c      **** #include "menu.h"
  13:myMisc.c      **** #include <chsem.h>
  14:myMisc.c      **** 
  15:myMisc.c      **** 
  16:myMisc.c      **** /*===========================================================================*/
  17:myMisc.c      **** /* Generic code.															 */
  18:myMisc.c      **** /*===========================================================================*/
  19:myMisc.c      **** 
  20:myMisc.c      **** /* Virtual serial port over USB.*/
  21:myMisc.c      **** static SerialUSBDriver SDU1;
  22:myMisc.c      **** 
  23:myMisc.c      **** 
  24:myMisc.c      **** /*
  25:myMisc.c      ****  * Lightshow thread, times are in milliseconds.
  26:myMisc.c      ****  */
  27:myMisc.c      **** static WORKING_AREA(waThread1, 128);
  28:myMisc.c      **** 
  29:myMisc.c      **** static msg_t Thread1(void *arg)
  30:myMisc.c      **** {
 124              		.loc 1 30 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 32
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128 0000 00B5     		push	{lr}
 129              		.cfi_def_cfa_offset 4
 130              		.cfi_offset 14, -4
 131 0002 89B0     		sub	sp, sp, #36
 132              		.cfi_def_cfa_offset 40
 133 0004 0190     		str	r0, [sp, #4]
  31:myMisc.c      ****     (void)arg;
  32:myMisc.c      ****     chRegSetThreadName("blinker1");
 134              		.loc 1 32 0
 135 0006 484B     		ldr	r3, .L8
 136 0008 9B69     		ldr	r3, [r3, #24]
 137 000a 484A     		ldr	r2, .L8+4
 138 000c 9A61     		str	r2, [r3, #24]
  33:myMisc.c      **** 
  34:myMisc.c      **** 
  35:myMisc.c      **** 
  36:myMisc.c      ****     int leds[] = { led1 , led2 , led3 , led4 };
 139              		.loc 1 36 0
 140 000e 484B     		ldr	r3, .L8+8
 141 0010 1B68     		ldr	r3, [r3]
 142 0012 0293     		str	r3, [sp, #8]
 143 0014 474B     		ldr	r3, .L8+12
 144 0016 1B68     		ldr	r3, [r3]
 145 0018 0393     		str	r3, [sp, #12]
 146 001a 474B     		ldr	r3, .L8+16
 147 001c 1B68     		ldr	r3, [r3]
 148 001e 0493     		str	r3, [sp, #16]
 149 0020 464B     		ldr	r3, .L8+20
 150 0022 1B68     		ldr	r3, [r3]
 151 0024 0593     		str	r3, [sp, #20]
  37:myMisc.c      ****     int curLed = 0;
 152              		.loc 1 37 0
 153 0026 0023     		movs	r3, #0
 154 0028 0793     		str	r3, [sp, #28]
 155              	.L7:
 156              	.LBB2:
  38:myMisc.c      ****     while (TRUE)
  39:myMisc.c      ****     {
  40:myMisc.c      **** 
  41:myMisc.c      ****         if (presses == 1)
 157              		.loc 1 41 0
 158 002a 454B     		ldr	r3, .L8+24
 159 002c 1B68     		ldr	r3, [r3]
 160 002e 012B     		cmp	r3, #1
 161 0030 24D1     		bne	.L2
  42:myMisc.c      ****         {
  43:myMisc.c      ****             presses = 0;
 162              		.loc 1 43 0
 163 0032 434B     		ldr	r3, .L8+24
 164 0034 0022     		movs	r2, #0
 165 0036 1A60     		str	r2, [r3]
 166              	.LBB3:
  44:myMisc.c      ****             chBSemSignal(&my_bsem);
 167              		.loc 1 44 0
 168 0038 2023     		movs	r3, #32
 169              	@ 44 "myMisc.c" 1
 170 003a 83F31188 		msr     BASEPRI, r3
 171              	@ 0 "" 2
 172              		.thumb
 173              	.LBE3:
 174 003e FFF7FEFF 		bl	dbg_check_lock
 175 0042 404B     		ldr	r3, .L8+28
 176 0044 9B68     		ldr	r3, [r3, #8]
 177 0046 002B     		cmp	r3, #0
 178 0048 02DC     		bgt	.L3
 179              		.loc 1 44 0 is_stmt 0 discriminator 1
 180 004a 3E48     		ldr	r0, .L8+28
 181 004c FFF7FEFF 		bl	chSemSignalI
 182              	.L3:
 183              		.loc 1 44 0 discriminator 2
 184 0050 FFF7FEFF 		bl	chSchRescheduleS
 185 0054 FFF7FEFF 		bl	dbg_check_unlock
 186              	.LBB4:
 187 0058 0023     		movs	r3, #0
 188              	@ 44 "myMisc.c" 1
 189 005a 83F31188 		msr     BASEPRI, r3
 190              	@ 0 "" 2
 191              		.thumb
 192              	.LBE4:
  45:myMisc.c      ****             if(dir == 1)
 193              		.loc 1 45 0 is_stmt 1 discriminator 2
 194 005e 3A4B     		ldr	r3, .L8+32
 195 0060 1B68     		ldr	r3, [r3]
 196 0062 012B     		cmp	r3, #1
 197 0064 03D1     		bne	.L4
  46:myMisc.c      ****             {
  47:myMisc.c      ****                 dir = 0;
 198              		.loc 1 47 0
 199 0066 384B     		ldr	r3, .L8+32
 200 0068 0022     		movs	r2, #0
 201 006a 1A60     		str	r2, [r3]
 202 006c 06E0     		b	.L2
 203              	.L4:
  48:myMisc.c      ****             }
  49:myMisc.c      ****             else if(dir == 0)
 204              		.loc 1 49 0
 205 006e 364B     		ldr	r3, .L8+32
 206 0070 1B68     		ldr	r3, [r3]
 207 0072 002B     		cmp	r3, #0
 208 0074 02D1     		bne	.L2
  50:myMisc.c      ****             {
  51:myMisc.c      ****                 dir = 1;
 209              		.loc 1 51 0
 210 0076 344B     		ldr	r3, .L8+32
 211 0078 0122     		movs	r2, #1
 212 007a 1A60     		str	r2, [r3]
 213              	.L2:
  52:myMisc.c      ****             }
  53:myMisc.c      ****         }
  54:myMisc.c      **** 
  55:myMisc.c      ****         int i = 0;
 214              		.loc 1 55 0
 215 007c 0023     		movs	r3, #0
 216 007e 0693     		str	r3, [sp, #24]
  56:myMisc.c      ****         /**
  57:myMisc.c      ****         while ((palReadPad(bt1ch, bt1)) && (i < 30000))
  58:myMisc.c      ****         {
  59:myMisc.c      ****             i++;
  60:myMisc.c      ****             if (i < 3000)
  61:myMisc.c      ****             {
  62:myMisc.c      ****                 if(dir == 1)
  63:myMisc.c      ****                 {
  64:myMisc.c      ****                     dir = 0;
  65:myMisc.c      ****                 }
  66:myMisc.c      ****                 else if(dir == 0)
  67:myMisc.c      ****                 {
  68:myMisc.c      ****                     dir = 1;
  69:myMisc.c      ****                 }
  70:myMisc.c      ****             }
  71:myMisc.c      **** 
  72:myMisc.c      ****             else if ( i > 5001)
  73:myMisc.c      ****             {
  74:myMisc.c      ****                 if (updown == 0)
  75:myMisc.c      ****                 {
  76:myMisc.c      ****                     blinkspeed  = blinkspeed + 30;
  77:myMisc.c      ****                     if (blinkspeed > blinkmax)
  78:myMisc.c      ****                         {
  79:myMisc.c      ****                             blinkspeed = blinkmax;
  80:myMisc.c      ****                             updown = 1;
  81:myMisc.c      ****                         }
  82:myMisc.c      ****                 }
  83:myMisc.c      ****                 else if (updown == 1)
  84:myMisc.c      ****                 {
  85:myMisc.c      ****                     blinkspeed = blinkspeed - 30;
  86:myMisc.c      ****                     if (blinkspeed < blinkmin)
  87:myMisc.c      ****                     {
  88:myMisc.c      ****                         blinkspeed = blinkmin;
  89:myMisc.c      ****                         updown = 0;
  90:myMisc.c      ****                     }
  91:myMisc.c      **** 
  92:myMisc.c      ****                 }
  93:myMisc.c      **** 
  94:myMisc.c      ****             }
  95:myMisc.c      ****             chThdSleepMilliseconds(1);
  96:myMisc.c      ****             //chprintf((BaseSequentialStream*)&SDU1, "value of i : %d \r\n", i);
  97:myMisc.c      **** 
  98:myMisc.c      ****         }
  99:myMisc.c      ****         */
 100:myMisc.c      ****         palSetPad(GPIOD, leds[ curLed ]);
 217              		.loc 1 100 0
 218 0080 324A     		ldr	r2, .L8+36
 219 0082 079B     		ldr	r3, [sp, #28]
 220 0084 9B00     		lsls	r3, r3, #2
 221 0086 08A9     		add	r1, sp, #32
 222 0088 0B44     		add	r3, r3, r1
 223 008a 53F8183C 		ldr	r3, [r3, #-24]
 224 008e 0121     		movs	r1, #1
 225 0090 01FA03F3 		lsl	r3, r1, r3
 226 0094 9BB2     		uxth	r3, r3
 227 0096 1383     		strh	r3, [r2, #24]	@ movhi
 101:myMisc.c      ****         chThdSleepMilliseconds(blinkspeed);
 228              		.loc 1 101 0
 229 0098 2D4B     		ldr	r3, .L8+40
 230 009a 1B68     		ldr	r3, [r3]
 231 009c 013B     		subs	r3, r3, #1
 232 009e 42F21072 		movw	r2, #10000
 233 00a2 02FB03F3 		mul	r3, r2, r3
 234 00a6 2B4A     		ldr	r2, .L8+44
 235 00a8 82FB0312 		smull	r1, r2, r2, r3
 236 00ac 9211     		asrs	r2, r2, #6
 237 00ae DB17     		asrs	r3, r3, #31
 238 00b0 D31A     		subs	r3, r2, r3
 239 00b2 0133     		adds	r3, r3, #1
 240 00b4 1846     		mov	r0, r3
 241 00b6 FFF7FEFF 		bl	chThdSleep
 102:myMisc.c      ****         palClearPad(GPIOD, leds[ curLed ]);
 242              		.loc 1 102 0
 243 00ba 244A     		ldr	r2, .L8+36
 244 00bc 079B     		ldr	r3, [sp, #28]
 245 00be 9B00     		lsls	r3, r3, #2
 246 00c0 08A9     		add	r1, sp, #32
 247 00c2 0B44     		add	r3, r3, r1
 248 00c4 53F8183C 		ldr	r3, [r3, #-24]
 249 00c8 0121     		movs	r1, #1
 250 00ca 01FA03F3 		lsl	r3, r1, r3
 251 00ce 9BB2     		uxth	r3, r3
 252 00d0 5383     		strh	r3, [r2, #26]	@ movhi
 103:myMisc.c      ****         chThdSleepMilliseconds(blinkspeed);
 253              		.loc 1 103 0
 254 00d2 1F4B     		ldr	r3, .L8+40
 255 00d4 1B68     		ldr	r3, [r3]
 256 00d6 013B     		subs	r3, r3, #1
 257 00d8 42F21072 		movw	r2, #10000
 258 00dc 02FB03F3 		mul	r3, r2, r3
 259 00e0 1C4A     		ldr	r2, .L8+44
 260 00e2 82FB0312 		smull	r1, r2, r2, r3
 261 00e6 9211     		asrs	r2, r2, #6
 262 00e8 DB17     		asrs	r3, r3, #31
 263 00ea D31A     		subs	r3, r2, r3
 264 00ec 0133     		adds	r3, r3, #1
 265 00ee 1846     		mov	r0, r3
 266 00f0 FFF7FEFF 		bl	chThdSleep
 104:myMisc.c      **** 
 105:myMisc.c      ****         if (dir == 1 )
 267              		.loc 1 105 0
 268 00f4 144B     		ldr	r3, .L8+32
 269 00f6 1B68     		ldr	r3, [r3]
 270 00f8 012B     		cmp	r3, #1
 271 00fa 07D1     		bne	.L5
 106:myMisc.c      ****         {
 107:myMisc.c      ****             curLed++;
 272              		.loc 1 107 0
 273 00fc 079B     		ldr	r3, [sp, #28]
 274 00fe 0133     		adds	r3, r3, #1
 275 0100 0793     		str	r3, [sp, #28]
 108:myMisc.c      ****             if (curLed > 3)
 276              		.loc 1 108 0
 277 0102 079B     		ldr	r3, [sp, #28]
 278 0104 032B     		cmp	r3, #3
 279 0106 01DD     		ble	.L5
 109:myMisc.c      ****             {
 110:myMisc.c      ****                 curLed = 0;
 280              		.loc 1 110 0
 281 0108 0023     		movs	r3, #0
 282 010a 0793     		str	r3, [sp, #28]
 283              	.L5:
 111:myMisc.c      ****             }
 112:myMisc.c      **** 
 113:myMisc.c      ****         }
 114:myMisc.c      ****         if (dir == 0)
 284              		.loc 1 114 0
 285 010c 0E4B     		ldr	r3, .L8+32
 286 010e 1B68     		ldr	r3, [r3]
 287 0110 002B     		cmp	r3, #0
 288 0112 08D1     		bne	.L6
 115:myMisc.c      ****         {
 116:myMisc.c      ****             curLed--;
 289              		.loc 1 116 0
 290 0114 079B     		ldr	r3, [sp, #28]
 291 0116 013B     		subs	r3, r3, #1
 292 0118 0793     		str	r3, [sp, #28]
 117:myMisc.c      ****             if (curLed < 0 )
 293              		.loc 1 117 0
 294 011a 079B     		ldr	r3, [sp, #28]
 295 011c 002B     		cmp	r3, #0
 296 011e 02DA     		bge	.L6
 118:myMisc.c      ****             {
 119:myMisc.c      ****                 curLed = 3;
 297              		.loc 1 119 0
 298 0120 0323     		movs	r3, #3
 299 0122 0793     		str	r3, [sp, #28]
 300              	.LBE2:
 120:myMisc.c      ****             }
 121:myMisc.c      ****         }
 122:myMisc.c      **** 
 123:myMisc.c      ****     }
 301              		.loc 1 123 0
 302 0124 81E7     		b	.L7
 303              	.L6:
 304 0126 80E7     		b	.L7
 305              	.L9:
 306              		.align	2
 307              	.L8:
 308 0128 00000000 		.word	rlist
 309 012c 5C000000 		.word	.LC13
 310 0130 00000000 		.word	led1
 311 0134 00000000 		.word	led2
 312 0138 00000000 		.word	led3
 313 013c 00000000 		.word	led4
 314 0140 00000000 		.word	presses
 315 0144 00000000 		.word	my_bsem
 316 0148 00000000 		.word	dir
 317 014c 000C0240 		.word	1073875968
 318 0150 00000000 		.word	blinkspeed
 319 0154 D34D6210 		.word	274877907
 320              		.cfi_endproc
 321              	.LFE118:
 323 0158 AFF30080 		.section	.text.startBlinker,"ax",%progbits
 323      AFF30080 
 324              		.align	2
 325              		.p2align 4,,15
 326              		.global	startBlinker
 327              		.thumb
 328              		.thumb_func
 330              	startBlinker:
 331              	.LFB119:
 124:myMisc.c      **** 
 125:myMisc.c      ****     return 0;
 126:myMisc.c      **** }
 127:myMisc.c      **** 
 128:myMisc.c      **** 
 129:myMisc.c      **** void startBlinker(void)
 130:myMisc.c      **** {
 332              		.loc 1 130 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336 0000 00B5     		push	{lr}
 337              		.cfi_def_cfa_offset 4
 338              		.cfi_offset 14, -4
 339 0002 83B0     		sub	sp, sp, #12
 340              		.cfi_def_cfa_offset 16
 131:myMisc.c      ****     chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 341              		.loc 1 131 0
 342 0004 0023     		movs	r3, #0
 343 0006 0093     		str	r3, [sp]
 344 0008 0448     		ldr	r0, .L11
 345 000a 4FF4DC71 		mov	r1, #440
 346 000e 4022     		movs	r2, #64
 347 0010 034B     		ldr	r3, .L11+4
 348 0012 FFF7FEFF 		bl	chThdCreateStatic
 132:myMisc.c      **** 
 133:myMisc.c      **** }
 349              		.loc 1 133 0
 350 0016 03B0     		add	sp, sp, #12
 351              		@ sp needed
 352 0018 5DF804FB 		ldr	pc, [sp], #4
 353              	.L12:
 354              		.align	2
 355              	.L11:
 356 001c 00000000 		.word	waThread1
 357 0020 00000000 		.word	Thread1
 358              		.cfi_endproc
 359              	.LFE119:
 361 0024 AFF30080 		.text
 361      AFF30080 
 361      AFF30080 
 362              	.Letext0:
 363              		.file 2 "/usr/lib/gcc/arm-none-eabi/4.8/include/stddef.h"
 364              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 365              		.file 4 "/usr/include/newlib/stdint.h"
 366              		.file 5 "/usr/src/chibiostest/os/ports/GCC/ARMCMx/chtypes.h"
 367              		.file 6 "/usr/src/chibiostest/os/kernel/include/chlists.h"
 368              		.file 7 "/usr/src/chibiostest/os/kernel/include/chthreads.h"
 369              		.file 8 "/usr/src/chibiostest/os/ports/GCC/ARMCMx/chcore_v7m.h"
 370              		.file 9 "/usr/src/chibiostest/os/kernel/include/chschd.h"
 371              		.file 10 "/usr/src/chibiostest/os/kernel/include/chsem.h"
 372              		.file 11 "/usr/src/chibiostest/os/kernel/include/chbsem.h"
 373              		.file 12 "/usr/src/chibiostest/os/kernel/include/chmtx.h"
 374              		.file 13 "/usr/src/chibiostest/os/kernel/include/chevents.h"
 375              		.file 14 "/usr/src/chibiostest/os/kernel/include/chqueues.h"
 376              		.file 15 "/usr/src/chibiostest/os/kernel/include/chstreams.h"
 377              		.file 16 "/usr/src/chibiostest/os/hal/platforms/STM32/GPIOv2/pal_lld.h"
 378              		.file 17 "/usr/src/chibiostest/os/hal/include/usb.h"
 379              		.file 18 "/usr/src/chibiostest/os/hal/platforms/STM32/OTGv1/usb_lld.h"
 380              		.file 19 "/usr/src/chibiostest/os/hal/platforms/STM32/OTGv1/stm32_otg.h"
 381              		.file 20 "/usr/src/chibiostest/os/hal/include/serial_usb.h"
 382              		.file 21 "/usr/src/chibiostest/os/various/shell.h"
 383              		.file 22 "menu.h"
 384              		.file 23 "/usr/src/chibiostest/os/ports/common/ARMCMx/CMSIS/include/core_cm4.h"
 385              		.file 24 "config.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 myMisc.c
     /tmp/ccQN3x0d.s:20     .bss.SDU1:0000000000000000 $d
     /tmp/ccQN3x0d.s:23     .bss.SDU1:0000000000000000 SDU1
     /tmp/ccQN3x0d.s:26     .rodata:0000000000000000 $d
     /tmp/ccQN3x0d.s:66     .rodata.commands:0000000000000000 $d
     /tmp/ccQN3x0d.s:69     .rodata.commands:0000000000000000 commands
     /tmp/ccQN3x0d.s:99     .rodata.shell_cfg1:0000000000000000 $d
     /tmp/ccQN3x0d.s:102    .rodata.shell_cfg1:0000000000000000 shell_cfg1
     /tmp/ccQN3x0d.s:106    .bss.waThread1:0000000000000000 $d
     /tmp/ccQN3x0d.s:109    .bss.waThread1:0000000000000000 waThread1
     /tmp/ccQN3x0d.s:116    .text.Thread1:0000000000000000 $t
     /tmp/ccQN3x0d.s:121    .text.Thread1:0000000000000000 Thread1
     /tmp/ccQN3x0d.s:308    .text.Thread1:0000000000000128 $d
     /tmp/ccQN3x0d.s:324    .text.startBlinker:0000000000000000 $t
     /tmp/ccQN3x0d.s:330    .text.startBlinker:0000000000000000 startBlinker
     /tmp/ccQN3x0d.s:356    .text.startBlinker:000000000000001c $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccQN3x0d.s:323    .text.Thread1:0000000000000158 $t
     /tmp/ccQN3x0d.s:361    .text.startBlinker:0000000000000024 $t

UNDEFINED SYMBOLS
cmd_mem
cmd_threads
cmd_toggle
cmd_blinkspeed
cmd_way
cmd_way_ch
cmd_blinkspeed_now
cmd_blinkspeed_min
cmd_blinkspeed_max
cmd_blinkspeed_min_ch
cmd_blinkspeed_max_ch
dbg_check_lock
chSemSignalI
chSchRescheduleS
dbg_check_unlock
chThdSleep
rlist
led1
led2
led3
led4
presses
my_bsem
dir
blinkspeed
chThdCreateStatic
