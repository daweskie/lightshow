   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.SDU1,"aw",%nobits
  20              		.align	2
  23              	SDU1:
  24 0000 00000000 		.space	600
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.section	.rodata
  26              		.align	2
  27              	.LC0:
  28 0000 6D656D00 		.ascii	"mem\000"
  29              		.align	2
  30              	.LC1:
  31 0004 74687265 		.ascii	"threads\000"
  31      61647300 
  32              		.align	2
  33              	.LC2:
  34 000c 626C696E 		.ascii	"blinkspeed\000"
  34      6B737065 
  34      656400
  35 0017 00       		.align	2
  36              	.LC3:
  37 0018 627300   		.ascii	"bs\000"
  38 001b 00       		.align	2
  39              	.LC4:
  40 001c 64697200 		.ascii	"dir\000"
  41              		.align	2
  42              	.LC5:
  43 0020 64697263 		.ascii	"dirch\000"
  43      6800
  44 0026 0000     		.align	2
  45              	.LC6:
  46 0028 61637475 		.ascii	"actual\000"
  46      616C00
  47 002f 00       		.align	2
  48              	.LC7:
  49 0030 62736D69 		.ascii	"bsmin\000"
  49      6E00
  50 0036 0000     		.align	2
  51              	.LC8:
  52 0038 62736D61 		.ascii	"bsmax\000"
  52      7800
  53 003e 0000     		.align	2
  54              	.LC9:
  55 0040 62736D69 		.ascii	"bsminch\000"
  55      6E636800 
  56              		.align	2
  57              	.LC10:
  58 0048 62736D61 		.ascii	"bsmaxch\000"
  58      78636800 
  59              		.section	.rodata.commands,"a",%progbits
  60              		.align	2
  63              	commands:
  64 0000 00000000 		.word	.LC0
  65 0004 00000000 		.word	cmd_mem
  66 0008 04000000 		.word	.LC1
  67 000c 00000000 		.word	cmd_threads
  68 0010 0C000000 		.word	.LC2
  69 0014 00000000 		.word	cmd_blinkspeed
  70 0018 18000000 		.word	.LC3
  71 001c 00000000 		.word	cmd_blinkspeed
  72 0020 1C000000 		.word	.LC4
  73 0024 00000000 		.word	cmd_way
  74 0028 20000000 		.word	.LC5
  75 002c 00000000 		.word	cmd_way_ch
  76 0030 28000000 		.word	.LC6
  77 0034 00000000 		.word	cmd_blinkspeed_now
  78 0038 30000000 		.word	.LC7
  79 003c 00000000 		.word	cmd_blinkspeed_min
  80 0040 38000000 		.word	.LC8
  81 0044 00000000 		.word	cmd_blinkspeed_max
  82 0048 40000000 		.word	.LC9
  83 004c 00000000 		.word	cmd_blinkspeed_min_ch
  84 0050 48000000 		.word	.LC10
  85 0054 00000000 		.word	cmd_blinkspeed_max_ch
  86 0058 00000000 		.word	0
  87 005c 00000000 		.word	0
  88              		.section	.rodata.shell_cfg1,"a",%progbits
  89              		.align	2
  92              	shell_cfg1:
  93 0000 00000000 		.word	SDU1
  94 0004 00000000 		.word	commands
  95              		.section	.text.main,"ax",%progbits
  96              		.align	2
  97              		.p2align 4,,15
  98              		.global	main
  99              		.thumb
 100              		.thumb_func
 102              	main:
 103              	.LFB118:
 104              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        **** 		ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:main.c        **** 								 2011,2012 Giovanni Di Sirio.
   4:main.c        **** 
   5:main.c        **** 		This file is part of ChibiOS/RT.
   6:main.c        **** 
   7:main.c        **** 		ChibiOS/RT is free software; you can redistribute it and/or modify
   8:main.c        **** 		it under the terms of the GNU General Public License as published by
   9:main.c        **** 		the Free Software Foundation; either version 3 of the License, or
  10:main.c        **** 		(at your option) any later version.
  11:main.c        **** 
  12:main.c        **** 		ChibiOS/RT is distributed in the hope that it will be useful,
  13:main.c        **** 		but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:main.c        **** 		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
  15:main.c        **** 		GNU General Public License for more details.
  16:main.c        **** 
  17:main.c        **** 		You should have received a copy of the GNU General Public License
  18:main.c        **** 		along with this program.	If not, see <http://www.gnu.org/licenses/>.
  19:main.c        ****  */
  20:main.c        **** 
  21:main.c        **** #include <stdio.h>
  22:main.c        **** #include <string.h>
  23:main.c        **** #include <stdlib.h>
  24:main.c        **** 
  25:main.c        **** #include "ch.h"
  26:main.c        **** #include "hal.h"
  27:main.c        **** 
  28:main.c        **** #include "myMisc.h"
  29:main.c        **** #include "buttonpush.h"
  30:main.c        **** #include "chprintf.h"
  31:main.c        **** #include "usbcfg.h"
  32:main.c        **** 
  33:main.c        **** #include "menu.h"
  34:main.c        **** #include "config.h"
  35:main.c        **** #include <chsem.h>
  36:main.c        **** 
  37:main.c        **** 
  38:main.c        **** 
  39:main.c        **** /*
  40:main.c        ****  * Shell configuration
  41:main.c        ****  */
  42:main.c        **** 
  43:main.c        **** #define SHELL_WA_SIZE	 THD_WA_SIZE(2048)
  44:main.c        **** 
  45:main.c        **** 
  46:main.c        **** 
  47:main.c        **** 
  48:main.c        **** 
  49:main.c        **** /*
  50:main.c        ****  * Application entry point.
  51:main.c        ****  */
  52:main.c        **** int main(void)
  53:main.c        **** {
 105              		.loc 1 53 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 8
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109 0000 00B5     		push	{lr}
 110              		.cfi_def_cfa_offset 4
 111              		.cfi_offset 14, -4
 112 0002 83B0     		sub	sp, sp, #12
 113              		.cfi_def_cfa_offset 16
  54:main.c        **** 
  55:main.c        **** //
  56:main.c        ****     /*
  57:main.c        ****      * Shell thread
  58:main.c        ****      */
  59:main.c        ****     Thread *shelltp = NULL;
 114              		.loc 1 59 0
 115 0004 0023     		movs	r3, #0
 116 0006 0193     		str	r3, [sp, #4]
  60:main.c        **** 
  61:main.c        ****     /*
  62:main.c        ****      * System initializations.
  63:main.c        ****      * - HAL initialization, this also initializes the configured device drivers
  64:main.c        ****      *	 and performs the board-specific initializations.
  65:main.c        ****      * - Kernel initialization, the main() function becomes a thread and the
  66:main.c        ****      *	 RTOS is active.
  67:main.c        ****      */
  68:main.c        ****     halInit();
 117              		.loc 1 68 0
 118 0008 FFF7FEFF 		bl	halInit
  69:main.c        ****     chSysInit();
 119              		.loc 1 69 0
 120 000c FFF7FEFF 		bl	chSysInit
  70:main.c        **** 
  71:main.c        ****     /*
  72:main.c        ****      * Initializes a serial-over-USB CDC driver.
  73:main.c        ****      */
  74:main.c        ****     sduObjectInit(&SDU1);
 121              		.loc 1 74 0
 122 0010 2648     		ldr	r0, .L6
 123 0012 FFF7FEFF 		bl	sduObjectInit
  75:main.c        ****     sduStart(&SDU1, &serusbcfg);
 124              		.loc 1 75 0
 125 0016 2548     		ldr	r0, .L6
 126 0018 2549     		ldr	r1, .L6+4
 127 001a FFF7FEFF 		bl	sduStart
  76:main.c        **** 
  77:main.c        ****     /*
  78:main.c        ****      * Activates the USB driver and then the USB bus pull-up on D+.
  79:main.c        ****      * Note, a delay is inserted in order to not have to disconnect the cable
  80:main.c        ****      * after a reset.
  81:main.c        ****      */
  82:main.c        ****     usbDisconnectBus(serusbcfg.usbp);
 128              		.loc 1 82 0
 129 001e 244B     		ldr	r3, .L6+4
 130 0020 1B68     		ldr	r3, [r3]
 131 0022 DB6B     		ldr	r3, [r3, #60]
 132 0024 224A     		ldr	r2, .L6+4
 133 0026 1268     		ldr	r2, [r2]
 134 0028 D26B     		ldr	r2, [r2, #60]
 135 002a 926B     		ldr	r2, [r2, #56]
 136 002c 22F40022 		bic	r2, r2, #524288
 137 0030 9A63     		str	r2, [r3, #56]
  83:main.c        ****     chThdSleepMilliseconds(2000);
 138              		.loc 1 83 0
 139 0032 44F61760 		movw	r0, #19991
 140 0036 FFF7FEFF 		bl	chThdSleep
  84:main.c        ****     usbStart(serusbcfg.usbp, &usbcfg);
 141              		.loc 1 84 0
 142 003a 1D4B     		ldr	r3, .L6+4
 143 003c 1B68     		ldr	r3, [r3]
 144 003e 1846     		mov	r0, r3
 145 0040 1C49     		ldr	r1, .L6+8
 146 0042 FFF7FEFF 		bl	usbStart
  85:main.c        ****     usbConnectBus(serusbcfg.usbp);
 147              		.loc 1 85 0
 148 0046 1A4B     		ldr	r3, .L6+4
 149 0048 1B68     		ldr	r3, [r3]
 150 004a DB6B     		ldr	r3, [r3, #60]
 151 004c 184A     		ldr	r2, .L6+4
 152 004e 1268     		ldr	r2, [r2]
 153 0050 D26B     		ldr	r2, [r2, #60]
 154 0052 926B     		ldr	r2, [r2, #56]
 155 0054 42F40022 		orr	r2, r2, #524288
 156 0058 9A63     		str	r2, [r3, #56]
  86:main.c        **** 
  87:main.c        ****     chBSemInit(&my_bsem, FALSE); //Init semaphore
 157              		.loc 1 87 0
 158 005a 1748     		ldr	r0, .L6+12
 159 005c 0121     		movs	r1, #1
 160 005e FFF7FEFF 		bl	chSemInit
  88:main.c        **** 
  89:main.c        ****     startBlinker();
 161              		.loc 1 89 0
 162 0062 FFF7FEFF 		bl	startBlinker
  90:main.c        ****     startButton();
 163              		.loc 1 90 0
 164 0066 FFF7FEFF 		bl	startButton
 165              	.L5:
  91:main.c        **** 
  92:main.c        ****     /*
  93:main.c        ****      * Main loop, does nothing except
  94:main.c        ****      */
  95:main.c        **** 
  96:main.c        ****     while (TRUE)
  97:main.c        ****     {
  98:main.c        **** 
  99:main.c        **** 		/* spawn a shell when the old one was terminated */
 100:main.c        ****         if (!shelltp)
 166              		.loc 1 100 0
 167 006a 019B     		ldr	r3, [sp, #4]
 168 006c 002B     		cmp	r3, #0
 169 006e 0ED1     		bne	.L2
 101:main.c        ****         {
 102:main.c        ****             if (SDU1.config->usbp->state == USB_ACTIVE)
 170              		.loc 1 102 0
 171 0070 0E4B     		ldr	r3, .L6
 172 0072 D3F85432 		ldr	r3, [r3, #596]
 173 0076 1B68     		ldr	r3, [r3]
 174 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 175 007a 042B     		cmp	r3, #4
 176 007c 11D1     		bne	.L4
 103:main.c        ****             {
 104:main.c        ****                 /* Spawns a new shell.*/
 105:main.c        ****                 shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO-10);
 177              		.loc 1 105 0
 178 007e 0F48     		ldr	r0, .L6+16
 179 0080 40F63811 		movw	r1, #2360
 180 0084 3622     		movs	r2, #54
 181 0086 FFF7FEFF 		bl	shellCreate
 182 008a 0190     		str	r0, [sp, #4]
 183 008c 09E0     		b	.L4
 184              	.L2:
 106:main.c        ****             }
 107:main.c        ****         }
 108:main.c        ****         else
 109:main.c        ****         {
 110:main.c        ****             /* If the previous shell exited.*/
 111:main.c        ****             if (chThdTerminated(shelltp))
 185              		.loc 1 111 0
 186 008e 019B     		ldr	r3, [sp, #4]
 187 0090 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 188 0094 0E2B     		cmp	r3, #14
 189 0096 04D1     		bne	.L4
 112:main.c        ****             {
 113:main.c        ****                 /* Recovers memory of the previous shell.*/
 114:main.c        ****                 chThdRelease(shelltp);
 190              		.loc 1 114 0
 191 0098 0198     		ldr	r0, [sp, #4]
 192 009a FFF7FEFF 		bl	chThdRelease
 115:main.c        ****                 shelltp = NULL;
 193              		.loc 1 115 0
 194 009e 0023     		movs	r3, #0
 195 00a0 0193     		str	r3, [sp, #4]
 196              	.L4:
 116:main.c        ****             }
 117:main.c        ****         }
 118:main.c        **** 
 119:main.c        ****         chThdSleepMilliseconds(50);
 197              		.loc 1 119 0
 198 00a2 40F2EB10 		movw	r0, #491
 199 00a6 FFF7FEFF 		bl	chThdSleep
 120:main.c        **** 
 121:main.c        ****     }
 200              		.loc 1 121 0
 201 00aa DEE7     		b	.L5
 202              	.L7:
 203              		.align	2
 204              	.L6:
 205 00ac 00000000 		.word	SDU1
 206 00b0 00000000 		.word	serusbcfg
 207 00b4 00000000 		.word	usbcfg
 208 00b8 00000000 		.word	my_bsem
 209 00bc 00000000 		.word	shell_cfg1
 210              		.cfi_endproc
 211              	.LFE118:
 213              		.text
 214              	.Letext0:
 215              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 216              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.8/include/stddef.h"
 217              		.file 4 "/usr/include/newlib/stdint.h"
 218              		.file 5 "/usr/src/chibiostest/os/ports/GCC/ARMCMx/chtypes.h"
 219              		.file 6 "/usr/src/chibiostest/os/kernel/include/chlists.h"
 220              		.file 7 "/usr/src/chibiostest/os/kernel/include/chthreads.h"
 221              		.file 8 "/usr/src/chibiostest/os/ports/GCC/ARMCMx/chcore_v7m.h"
 222              		.file 9 "/usr/src/chibiostest/os/kernel/include/chsem.h"
 223              		.file 10 "/usr/src/chibiostest/os/kernel/include/chbsem.h"
 224              		.file 11 "/usr/src/chibiostest/os/kernel/include/chmtx.h"
 225              		.file 12 "/usr/src/chibiostest/os/kernel/include/chevents.h"
 226              		.file 13 "/usr/src/chibiostest/os/kernel/include/chqueues.h"
 227              		.file 14 "/usr/src/chibiostest/os/kernel/include/chstreams.h"
 228              		.file 15 "/usr/src/chibiostest/os/hal/include/usb.h"
 229              		.file 16 "/usr/src/chibiostest/os/hal/platforms/STM32/OTGv1/usb_lld.h"
 230              		.file 17 "/usr/src/chibiostest/os/hal/platforms/STM32/OTGv1/stm32_otg.h"
 231              		.file 18 "/usr/src/chibiostest/os/hal/include/serial_usb.h"
 232              		.file 19 "/usr/src/chibiostest/os/various/shell.h"
 233              		.file 20 "menu.h"
 234              		.file 21 "/usr/src/chibiostest/os/ports/common/ARMCMx/CMSIS/include/core_cm4.h"
 235              		.file 22 "usbcfg.h"
 236              		.file 23 "config.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccfePCeC.s:20     .bss.SDU1:0000000000000000 $d
     /tmp/ccfePCeC.s:23     .bss.SDU1:0000000000000000 SDU1
     /tmp/ccfePCeC.s:26     .rodata:0000000000000000 $d
     /tmp/ccfePCeC.s:60     .rodata.commands:0000000000000000 $d
     /tmp/ccfePCeC.s:63     .rodata.commands:0000000000000000 commands
     /tmp/ccfePCeC.s:89     .rodata.shell_cfg1:0000000000000000 $d
     /tmp/ccfePCeC.s:92     .rodata.shell_cfg1:0000000000000000 shell_cfg1
     /tmp/ccfePCeC.s:96     .text.main:0000000000000000 $t
     /tmp/ccfePCeC.s:102    .text.main:0000000000000000 main
     /tmp/ccfePCeC.s:205    .text.main:00000000000000ac $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
cmd_mem
cmd_threads
cmd_blinkspeed
cmd_way
cmd_way_ch
cmd_blinkspeed_now
cmd_blinkspeed_min
cmd_blinkspeed_max
cmd_blinkspeed_min_ch
cmd_blinkspeed_max_ch
halInit
chSysInit
sduObjectInit
sduStart
chThdSleep
usbStart
chSemInit
startBlinker
startButton
shellCreate
chThdRelease
serusbcfg
usbcfg
my_bsem
